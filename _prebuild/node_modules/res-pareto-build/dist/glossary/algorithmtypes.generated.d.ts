import { T } from "./datatypes.generated";
import * as g_common from "glo-pareto-common";
export declare namespace ASYNC {
    namespace I {
        type Array<TEndType, TType> = ($: T.Array<TEndType, TType>) => void;
        type Dictionary<TEndType, TType> = ($: T.Dictionary<TEndType, TType>) => void;
        type DuplicatesHandler = {
            'data': ($: g_common.T.String) => void;
            'end': () => void;
        };
        type Elements<TEndType, TType> = {
            'data': ($: TType) => void;
            'end': ($: TEndType) => void;
        };
        type Entries<TEndType, TType> = {
            'data': ($: T.KeyValuePair<TType>) => void;
            'end': ($: TEndType) => void;
        };
        type StringConsumer<TEndType> = ($: T.String<TEndType>) => void;
        type StringStreamConsumer<TEndType> = {
            'data': ($: g_common.T.String) => void;
            'end': ($: TEndType) => void;
        };
    }
    namespace A {
        namespace C {
            type CreateArrayBuilder = {
                'construct': <TEndType, TType>($is: {
                    readonly 'handler': ASYNC.I.Array<TEndType, TType>;
                }) => ASYNC.I.Elements<TEndType, TType>;
            };
        }
        namespace C {
            type CreateSafeDictionaryBuilder = {
                'construct': <TEndType, TType>($is: {
                    readonly 'duplicatesHandler': ASYNC.I.DuplicatesHandler;
                    readonly 'handler': ASYNC.I.Dictionary<TEndType, TType>;
                }) => ASYNC.I.Entries<TEndType, TType>;
            };
        }
        namespace C {
            type CreateStringBuilder = {
                'construct': <TEndType>($is: {
                    readonly 'handler': ASYNC.I.StringConsumer<TEndType>;
                }) => ASYNC.I.StringStreamConsumer<TEndType>;
            };
        }
        namespace C {
            type CreateUnsafeDictionaryBuilder = {
                'construct': <TEndType, TType>($is: {
                    readonly 'handler': ASYNC.I.Dictionary<TEndType, TType>;
                }) => ASYNC.I.Entries<TEndType, TType>;
            };
        }
    }
}
export declare namespace SYNC {
    namespace I {
        type Add<TType> = ($: T.KeyValuePair<TType>) => void;
        type Push<TType> = ($: TType) => void;
    }
    namespace A {
        namespace F {
            type BuildArray = <TType>($c: ($i: SYNC.I.Push<TType>) => void) => g_common.T.Array<TType>;
        }
        namespace F {
            type BuildSafeDictionary = <TType>($c: ($i: SYNC.I.Add<TType>) => void) => g_common.T.Dictionary<TType>;
        }
        namespace F {
            type BuildUnsafeDictionary = <TType>($c: ($i: SYNC.I.Add<TType>) => void) => g_common.T.Dictionary<TType>;
        }
    }
}
