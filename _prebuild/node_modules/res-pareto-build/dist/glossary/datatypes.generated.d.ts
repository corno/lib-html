import * as g_common from "glo-pareto-common";
export declare namespace N { }
export declare namespace T {
    namespace Array {
        type array<TEndType, TType> = g_common.T.Array<TType>;
        type end<TEndType, TType> = TEndType;
    }
    type Array<TEndType, TType> = {
        readonly 'array': g_common.T.Array<TType>;
        readonly 'end': TEndType;
    };
    namespace Dictionary {
        type dictionary<TEndType, TType> = g_common.T.Dictionary<TType>;
        type end<TEndType, TType> = TEndType;
    }
    type Dictionary<TEndType, TType> = {
        readonly 'dictionary': g_common.T.Dictionary<TType>;
        readonly 'end': TEndType;
    };
    namespace DictionaryBuildStrategy {
        namespace ignore { }
        type ignore = null;
        namespace overwrite { }
        type overwrite = null;
    }
    type DictionaryBuildStrategy = ['ignore', null] | ['overwrite', null];
    namespace KeyValuePair {
        type key<TType> = string;
        type value<TType> = TType;
    }
    type KeyValuePair<TType> = {
        readonly 'key': string;
        readonly 'value': TType;
    };
    namespace String {
        type end<TEndType> = TEndType;
        type _lstring<TEndType> = string;
    }
    type String<TEndType> = {
        readonly 'end': TEndType;
        readonly 'string': string;
    };
}
