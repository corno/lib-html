"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tuple3 = exports.tuple2 = void 0;
const pi = __importStar(require("pareto-core-internals"));
function tuple2(cb1, cb2, map) {
    return pi.wrapAsyncValueImp((cb) => {
        let elem1IsSet = false;
        let elem2IsSet = false;
        let elem1;
        let elem2;
        function wrapup() {
            if (elem1IsSet && elem2IsSet) {
                cb(map({ first: elem1, second: elem2 }));
            }
        }
        cb1.__execute((val) => {
            elem1 = val;
            elem1IsSet = true;
            wrapup();
        });
        cb2.__execute((val) => {
            elem2 = val;
            elem2IsSet = true;
            wrapup();
        });
    });
}
exports.tuple2 = tuple2;
function tuple3(cb1, cb2, cb3, map) {
    return pi.wrapAsyncValueImp((cb) => {
        let elem1IsSet = false;
        let elem2IsSet = false;
        let elem3IsSet = false;
        let elem1;
        let elem2;
        let elem3;
        function wrapup() {
            if (elem1IsSet && elem2IsSet && elem3IsSet) {
                cb(map({ first: elem1, second: elem2, third: elem3 }));
            }
        }
        cb1.__execute((val) => {
            elem1 = val;
            elem1IsSet = true;
            wrapup();
        });
        cb2.__execute((val) => {
            elem2 = val;
            elem2IsSet = true;
            wrapup();
        });
        cb3.__execute((val) => {
            elem3 = val;
            elem3IsSet = true;
            wrapup();
        });
    });
}
exports.tuple3 = tuple3;
