"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.select = void 0;
const pl = __importStar(require("pareto-core-lib"));
var select;
(function (select) {
    // export const Parameter: Select.Parameter = ($) => {
    //     return pl.cc($.type, ($) => {
    //         switch ($[0]) {
    //             case 'lookup': return pl.ss($, ($) => Global__Type__Selection($.type))
    //             case 'resolved value': return pl.ss($, ($) => Global__Type__Selection($.type))
    //             default: return pl.au($[0])
    //         }
    //     })
    // }
    // export const Lookup__Selection: Select.Lookup__Selection = ($) => {
    //     switch ($[0]) {
    //         case 'parameter': return pl.ss($, ($) => Global__Type__Selection($.lookup.type)).type
    //         case 'resolved dictionary': return pl.ss($, ($) => Value__Selection($))
    //         case 'this': return pl.ss($, ($) => $['containing dictionary'].type)
    //         default: return pl.au($[0])
    //     }
    // }
    select.Value__Selection__Tail = ($) => {
        switch ($[0]) {
            case 'component': return pl.ss($, ($) => pl.optional($.tail, ($) => select.Value__Selection__Tail($), () => select.Global__Type__Selection($.component.type).type));
            case 'group': return pl.ss($, ($) => pl.optional($.tail, ($) => select.Value__Selection__Tail($), () => $.property.referent.type));
            //case 'optional': return pl.ss($, ($) => $.optional.type)
            case 'reference': return pl.ss($, ($) => pl.optional($.tail, ($) => select.Value__Selection__Tail($), () => select.No__Context__Value__Selection($.reference.dictionary.type)));
            case 'state group': return pl.ss($, ($) => select.Global__Type__Selection($['result type']).type);
            default: return pl.au($[0]);
        }
    };
    select.No__Context__Value__Selection = ($) => {
        return pl.optional($.tail, ($) => select.Value__Selection__Tail($), () => select.Variable($.start.referent));
    };
    select.Global__Type__Selection = ($) => {
        switch ($[0]) {
            case 'import': return pl.ss($, ($) => $.type.referent);
            case 'resolved sibling': return pl.ss($, ($) => $.type.referent);
            default: return pl.au($[0]);
        }
    };
    select.Variable = ($) => {
        switch ($[0]) {
            case 'dictionary constraint': return pl.ss($, ($) => {
                return pl.cc($.referent, ($) => {
                    switch ($[0]) {
                        case 'dictionary': return pl.ss($, ($) => $.dictionary.dictionary.type);
                        //case 'lookup': return pl.ss($, ($) => Lookup__Selection($))
                        default: return pl.au($[0]);
                    }
                });
            });
            case 'state constraint': return pl.ss($, ($) => $.referent.state.referent.type);
            case 'parameter': return pl.ss($, ($) => select.Global__Type__Selection($.parameter.referent.type)).type;
            case 'parent variable': return pl.ss($, ($) => select.Variable($.referent));
            case 'sibling property': return pl.ss($, ($) => $.referent.type);
            default: return pl.au($[0]);
        }
    };
})(select = exports.select || (exports.select = {}));
