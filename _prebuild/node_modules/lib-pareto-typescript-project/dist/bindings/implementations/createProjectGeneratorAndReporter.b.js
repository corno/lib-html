"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$$ = void 0;
const a_pareto2typescript = __importStar(require("../../submodules/pareto2typescript"));
const a_parametersparser = __importStar(require("../../submodules/parametersparser"));
const a_foreach = __importStar(require("res-pareto-foreach"));
const a_fs = __importStar(require("lib-pareto-filesystem"));
const a_fp = __importStar(require("lib-fountain-pen"));
const a_coll = __importStar(require("res-pareto-collation"));
const a_ts = __importStar(require("res-typescript"));
const a_main = __importStar(require("../../main"));
const a_mainLib = __importStar(require("res-pareto-main"));
const $$ = () => {
    const el = a_mainLib.$r.createErrorLogger().construct();
    const log = a_mainLib.$r.createLogger().construct();
    return {
        'construct': () => {
            return a_main.$a.createProjectGeneratorAndReporter({
                'readDirectoryOrAbort': a_fs.$b.createReadDirectoryOrAbort({
                    'onError': ($) => {
                        el.data($);
                    },
                }),
                'createDirectory': a_fp.$b.createDirectory(),
                'createParametersParser': a_parametersparser.$a.createParametersParser(),
                'validateFiles': a_pareto2typescript.$a.validateFiles(),
                'serializeProject': a_pareto2typescript.$a.serializeProject({
                    'dictionaryForEach': a_foreach.$r.dictionaryForEach({
                        'compare': a_coll.$r.localeIsABeforeB(),
                    }),
                    'enrichedDictionaryForEach': a_foreach.$r.enrichedDictionaryForEach({
                        'compare': a_coll.$r.localeIsABeforeB(),
                    }),
                    'serializeGlossary': a_pareto2typescript.$a.serializeGlossary({
                        'enrichedDictionaryForEach': a_foreach.$r.enrichedDictionaryForEach({
                            'compare': a_coll.$r.localeIsABeforeB(),
                        }),
                        'dictionaryForEach': a_foreach.$r.dictionaryForEach({
                            'compare': a_coll.$r.localeIsABeforeB(),
                        }),
                        'createIdentifier': a_ts.$r.createIdentifier(),
                        'createApostrophedString': a_ts.$r.createApostrophedString(),
                        'createBacktickedString': a_ts.$r.createBacktickedString(),
                        'createQuotedString': a_ts.$r.createQuotedString(),
                    }),
                    'serializeImplementation': a_pareto2typescript.$a.serializeImplementation({
                        // 'arrayForEach': a_foreach.$r.arrayForEach(),
                        'dictionaryForEach': a_foreach.$r.dictionaryForEach({
                            'compare': a_coll.$r.localeIsABeforeB(),
                        }),
                        // 'dictionaryForEach_InnerFunctions': a_foreach.$r.dictionaryForEach({
                        //     'compare': a_coll.$r.localeIsABeforeB(),
                        // }),
                        //'enrichedArrayForEach': a_foreach.$r.enrichedArrayForEach(),
                        'enrichedDictionaryForEach': a_foreach.$r.enrichedDictionaryForEach({
                            'compare': a_coll.$r.localeIsABeforeB(),
                        }),
                        'createIdentifier': a_ts.$r.createIdentifier(),
                    }),
                    'createIdentifier': a_ts.$r.createIdentifier(),
                }),
            }).construct({
                'log': ($) => {
                    log.data($);
                },
                'logError': ($) => {
                    el.data($);
                }
            });
        }
    };
};
exports.$$ = $$;
