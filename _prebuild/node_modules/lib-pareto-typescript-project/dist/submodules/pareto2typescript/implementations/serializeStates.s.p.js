"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$$ = void 0;
const pl = __importStar(require("pareto-core-lib"));
const $$ = ($d) => {
    return ($, $i) => {
        function serializeType($, $i) {
            switch ($[0]) {
                case 'null':
                    pl.ss($, ($) => {
                        $i.snippet(`null`);
                    });
                    break;
                case 'boolean':
                    pl.ss($, ($) => {
                        $i.snippet(`boolean`);
                    });
                    break;
                case 'reference':
                    pl.ss($, ($) => {
                        $i.snippet($d.createIdentifier(`S${$}`));
                    });
                    break;
                case 'number':
                    pl.ss($, ($) => {
                        $i.snippet(`number`);
                    });
                    break;
                case 'string':
                    pl.ss($, ($) => {
                        $i.snippet(`string`);
                    });
                    break;
                // case 'computed':
                //     pl.ss($, ($) => {
                //         $i.snippet(`() => `)
                //         serializeType($, $i)
                //     })
                //     break
                case 'array':
                    pl.ss($, ($) => {
                        $i.snippet(`pl.StateArray<`);
                        serializeType($, $i);
                        $i.snippet(`>`);
                    });
                    break;
                case 'dictionary':
                    pl.ss($, ($) => {
                        $i.snippet(`pl.StateDictionary<`);
                        serializeType($, $i);
                        $i.snippet(`>`);
                    });
                    break;
                case 'group':
                    pl.ss($, ($) => {
                        $d.enrichedDictionaryForEach($, {
                            'onEmpty': () => {
                                $i.snippet(`null`);
                            },
                            'onNotEmpty': ($c) => {
                                $i.snippet(`{`);
                                $i.indent(($i) => {
                                    $c(($) => {
                                        $i.nestedLine(($i) => {
                                            $i.snippet(`${$d.createApostrophedString($.key)}: `);
                                            serializeType($.value.type, $i);
                                        });
                                    });
                                });
                                $i.snippet(`}`);
                            }
                        });
                    });
                    break;
                // case 'nested':
                //     pl.ss($, ($) => {
                //         $i.snippet(`pt.Nested<`)
                //         serializeType($, $i)
                //         $i.snippet(`>`)
                //     })
                //     break
                case 'optional':
                    pl.ss($, ($) => {
                        $i.snippet(`null | `);
                        serializeType($, $i);
                    });
                    break;
                case 'parameter':
                    pl.ss($, ($) => {
                        $i.snippet($d.createIdentifier(`A${$}`));
                    });
                    break;
                case 'taggedUnion':
                    pl.ss($, ($) => {
                        $i.indent(($i) => {
                            $d.dictionaryForEach($, ($) => {
                                $i.nestedLine(($i) => {
                                    $i.snippet(`| [${$d.createApostrophedString($.key)}, `);
                                    serializeType($.value, $i);
                                    $i.snippet(`]`);
                                });
                            });
                        });
                    });
                    break;
                default: pl.au($[0]);
            }
        }
        $i.nestedLine(($i) => {
            $i.snippet(`import * as pl from "./templib"`);
        });
        $d.dictionaryForEach($, ($) => {
            $i.nestedLine(($i) => {
                $i.snippet(`export type ${$d.createIdentifier(`S${$.key}`)} = `);
                serializeType($.value, $i);
            });
        });
    };
};
exports.$$ = $$;
