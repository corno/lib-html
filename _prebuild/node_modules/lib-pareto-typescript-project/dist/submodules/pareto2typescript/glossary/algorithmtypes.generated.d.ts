import { T } from "./datatypes.generated";
import * as g_algorithm from "../../algorithm";
import * as g_common from "glo-pareto-common";
import * as g_fp from "lib-fountain-pen";
import * as g_fp2 from "lib-fountain-pen/dist/submodules/typelibrary";
import * as g_project from "../../project";
export declare namespace ASYNC {
    namespace I { }
    namespace A { }
}
export declare namespace SYNC {
    namespace A {
        namespace P {
            type ProjectToDirectory<GAnnotation> = ($: g_project.T.Project<GAnnotation>, $i: g_fp.SYNC.I.Directory) => void;
        }
        namespace P {
            type SerializeBuildEnvironment<GAnnotation> = ($: g_common.T.Null, $i: g_fp.SYNC.I.Directory) => void;
        }
        namespace P {
            type SerializeGlossary<GAnnotation> = ($: T.SerializeGlossaryData<GAnnotation>, $i: g_fp.SYNC.I.Directory) => void;
        }
        namespace P {
            type SerializeImplementation<GAnnotation> = ($: g_algorithm.T.Implementation<GAnnotation>, $i: g_fp.SYNC.I.Directory) => void;
        }
        namespace P {
            type SerializeParetoEnvironment<GAnnotation> = ($: g_common.T.Null, $i: g_fp.SYNC.I.Directory) => void;
        }
        namespace P {
            type SerializeStates<GAnnotation> = ($: g_algorithm.T.States<GAnnotation>, $i: g_fp.SYNC.I.Block) => void;
        }
        namespace F {
            type ValidateFiles<GAnnotation> = ($: g_common.T.Null) => g_fp2.T.Directory<GAnnotation>;
        }
    }
}
