"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.streamconsumer = exports.choice = exports.infref = exports.aInterfaceMethod = exports.sInterfaceMethod = exports.sfunction = exports.scallback = exports.scallbackfunction = exports.procedure = exports.afunction = exports.resource = exports.constructor = exports.sInterface = exports.aInterface = exports.aInf = exports.sInf = exports.data = exports.nothing = exports.aInterfaceReference = exports.aExternalInterfaceReference = exports.sInterfaceReference = exports.sExternalInterfaceReference = exports.typeReference = exports.externalTypeReference = exports.imp = exports.ref = exports.member = exports.group = exports.computed = exports.optional = exports.array = exports.glossaryParameter = exports.typeParameter = exports.type = exports.ns = exports.parametrizedType = exports.dictionary = exports.taggedUnion = exports.number = exports.string = exports.boolean = exports.null_ = void 0;
const pd = __importStar(require("pareto-core-data"));
function null_() {
    return ['null', null];
}
exports.null_ = null_;
function boolean() {
    return ['boolean', null];
}
exports.boolean = boolean;
function string() {
    return ['string', null];
}
exports.string = string;
function number() {
    return ['number', null];
}
exports.number = number;
function taggedUnion($) {
    return ['taggedUnion', pd.d($)];
}
exports.taggedUnion = taggedUnion;
function dictionary($) {
    return ['dictionary', $];
}
exports.dictionary = dictionary;
function parametrizedType(parameters, type) {
    return {
        'parameters': pd.d(parameters),
        'type': type,
    };
}
exports.parametrizedType = parametrizedType;
function ns(types, ns) {
    return {
        'namespaces': pd.d(ns),
        'types': pd.d(types),
    };
}
exports.ns = ns;
function type(type) {
    return {
        'parameters': pd.d({}),
        'type': type,
    };
}
exports.type = type;
function typeParameter($) {
    return ['type parameterXX', $];
}
exports.typeParameter = typeParameter;
function glossaryParameter($) {
    return ['glossary parameterXX', $];
}
exports.glossaryParameter = glossaryParameter;
function array($) {
    return ['array', $];
}
exports.array = array;
function optional($) {
    return ['optional', $];
}
exports.optional = optional;
function computed($) {
    return ['computed', $];
}
exports.computed = computed;
function group($) {
    return ['group', pd.d($)];
}
exports.group = group;
function member($) {
    return {
        type: $
    };
}
exports.member = member;
function ref(typeReference) {
    return ['reference', typeReference];
}
exports.ref = ref;
// export function context(glossary: string, annotation: pd.SourceLocation): t.T.Context<pd.SourceLocation> {
//     if (glossary === undefined) {
//         return ['local', null]
//     } else {
//         return ['import', {
//             // 'glossary': {
//             //     'annotation': annotation,
//             //     'key': glossary,
//             // },
//             'glossaryXX': glossary,
//         }]
//     }
// }
function imp() {
    return null;
}
exports.imp = imp;
function externalTypeReference(contextX, type, glossArgs, typeArgs) {
    return ['type', {
            'context': ['import', {
                    // 'glossary': {
                    //     'annotation': annotation,
                    //     'key': glossary,
                    // },
                    'glossary': {
                        'glossary': {
                            'annotation': pd.getLocationInfo(1),
                            'key': contextX,
                        },
                        'glossary arguments': pd.d(glossArgs === undefined ? {} : glossArgs),
                    },
                }],
            'typeXX': type,
            'tailXX': pd.a([]),
            'type arguments': pd.d(typeArgs === undefined ? {} : typeArgs),
        }];
}
exports.externalTypeReference = externalTypeReference;
function typeReference(type, typeArgs) {
    return ['type', {
            'context': ['local', null],
            'typeXX': type,
            'tailXX': pd.a([]),
            'type arguments': pd.d(typeArgs === undefined ? {} : typeArgs),
        }];
}
exports.typeReference = typeReference;
function sExternalInterfaceReference(contextX, inf, glossArgs, typeArgs) {
    return {
        'context': ['import', {
                // 'glossary': {
                //     'annotation': annotation,
                //     'key': glossary,
                // },
                'glossary': {
                    'glossary': {
                        'annotation': pd.getLocationInfo(1),
                        'key': contextX,
                    },
                    'glossary arguments': pd.d(glossArgs === undefined ? {} : glossArgs),
                },
                // 'interface FIXME': {
                //     'annotation': pd.getLocationInfo(1),
                //     'key': inf,
                // },
                'interfaceXX': inf
            }],
        'type arguments': pd.d(typeArgs === undefined ? {} : typeArgs),
    };
}
exports.sExternalInterfaceReference = sExternalInterfaceReference;
function sInterfaceReference(inf, args) {
    return {
        'context': ['local', {
                // 'interface': {
                //     'annotation': pd.getLocationInfo(1),
                //     'key': inf,
                // },
                'interfaceXX': inf
            }],
        'type arguments': pd.d(args === undefined ? {} : args),
    };
}
exports.sInterfaceReference = sInterfaceReference;
function aExternalInterfaceReference(contextX, inf, glossArgs, typeArgs) {
    return {
        'context': ['import', {
                // 'glossary': {
                //     'annotation': annotation,
                //     'key': glossary,
                // },
                'glossary': {
                    'glossary': {
                        'annotation': pd.getLocationInfo(1),
                        'key': contextX,
                    },
                    'glossary arguments': pd.d(glossArgs === undefined ? {} : glossArgs),
                },
            }],
        'interfaceXX': inf,
        'type arguments': pd.d(typeArgs === undefined ? {} : typeArgs),
    };
}
exports.aExternalInterfaceReference = aExternalInterfaceReference;
function aInterfaceReference(inf, args) {
    return {
        'context': ['local', null],
        'interfaceXX': inf,
        'type arguments': pd.d(args === undefined ? {} : args),
    };
}
exports.aInterfaceReference = aInterfaceReference;
function nothing() {
    return ['nothing', null];
}
exports.nothing = nothing;
function data($) {
    return ['data', $];
}
exports.data = data;
function sInf($) {
    return ['interface', $];
}
exports.sInf = sInf;
function aInf($) {
    return ['interface', $];
}
exports.aInf = aInf;
function aInterface(inf, params) {
    return {
        'parameters': pd.d(params === undefined ? {} : params),
        'interface': inf,
    };
}
exports.aInterface = aInterface;
function sInterface(inf, params) {
    return {
        'parameters': pd.d(params === undefined ? {} : params),
        'interface': inf,
    };
}
exports.sInterface = sInterface;
function constructor(inf, downstreams, params) {
    return {
        'parameters': pd.d(params === undefined ? {} : params),
        'type': ['constructor', {
                'interface': inf,
                'downstreams': pd.d(downstreams),
            }]
    };
}
exports.constructor = constructor;
function resource(request, consumer, params) {
    return {
        'parameters': pd.d(params === undefined ? {} : params),
        'type': ['resource', {
                'request': request,
                'consumer': consumer,
            }]
    };
}
exports.resource = resource;
function afunction(out, in_, params) {
    return {
        'parameters': pd.d(params === undefined ? {} : params),
        'type': ['function', {
                'in': in_,
                'out': out,
            }]
    };
}
exports.afunction = afunction;
function procedure(in_, out, params) {
    return {
        'parameters': pd.d(params === undefined ? {} : params),
        'type': ['procedure', {
                'in': in_,
                'out': out,
            }]
    };
}
exports.procedure = procedure;
function scallbackfunction(out, in_, callbacks, params) {
    return {
        'parameters': pd.d(params === undefined ? {} : params),
        'type': ['function', {
                'in': in_,
                'out': out,
                'callbacks': pd.d(callbacks)
            }]
    };
}
exports.scallbackfunction = scallbackfunction;
function scallback(out, in_, lookups) {
    return {
        'in': in_,
        'out': out,
        'lookups': pd.d(lookups === undefined ? {} : lookups)
    };
}
exports.scallback = scallback;
function sfunction(out, in_, params) {
    return {
        'parameters': pd.d(params === undefined ? {} : params),
        'type': ['function', {
                'in': in_,
                'out': out,
                'callbacks': pd.d({}),
            }]
    };
}
exports.sfunction = sfunction;
function sInterfaceMethod(data, inf) {
    return ['method', {
            'data': data === null
                ? [false]
                : [true, data],
            'interface': inf === undefined
                ? [false]
                : inf === null
                    ? [false]
                    : [true, inf],
        }];
}
exports.sInterfaceMethod = sInterfaceMethod;
function aInterfaceMethod(data, inf) {
    return ['method', {
            'data': data === null
                ? [false]
                : [true, data],
            'interface': inf === undefined
                ? [false]
                : inf === null
                    ? [false]
                    : [true, inf],
        }];
}
exports.aInterfaceMethod = aInterfaceMethod;
function infref($) {
    return ['reference', $];
}
exports.infref = infref;
function choice(options) {
    return ['choice', {
            'options': pd.d(options),
        }];
}
exports.choice = choice;
function streamconsumer(data, end) {
    return ['streamconsumer', {
            'data': data,
            'end': end
        }];
}
exports.streamconsumer = streamconsumer;
