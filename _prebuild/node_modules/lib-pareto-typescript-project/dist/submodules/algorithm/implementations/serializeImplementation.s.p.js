"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$$ = void 0;
const pl = __importStar(require("pareto-core-lib"));
const $$ = ($d) => {
    return ($, $i) => {
        // function serializeExpression($: api.TExpression, $i: g_fp.B.Line) {
        //     switch ($[0]) {
        //         case 'call':
        //             pl.ss($, ($) => {
        //                 $i.snippet(`['call', {`)
        //                 $i.indent(($i) => {
        //                     $i.nestedLine(($i) => {
        //                         $i.snippet(`'function': "${$.function}"`)
        //                         $i.snippet(`,`)
        //                     })
        //                 })
        //                 $i.snippet(`}]`)
        //             })
        //             break
        //         case 'contextChange':
        //             pl.ss($, ($) => {
        //                 $i.snippet(`['contextChange', {`)
        //                 $i.indent(($i) => {
        //                     $i.nestedLine(($i) => {
        //                         $i.snippet(`'block': `)
        //                         serializeFunctionBlock($.block, $i)
        //                         $i.snippet(`,`)
        //                     })
        //                 })
        //                 $i.snippet(`}]`)
        //             })
        //             break
        //         case 'groupInitializer':
        //             pl.ss($, ($) => {
        //                 $i.snippet(`['groupInitializer', {`)
        //                 $i.indent(($i) => {
        //                     $i.nestedLine(($i) => {
        //                         $i.snippet(`'properties': d({`)
        //                         $i.indent(($i) => {
        //                             $d.dictionaryForEach($.properties, ($) => {
        //                                 $i.nestedLine(($i) => {
        //                                     $i.snippet(`"${$.key}": `)
        //                                     serializeExpression($.value, $i)
        //                                     $i.snippet(`,`)
        //                                 })
        //                             })
        //                         })
        //                         $i.snippet(`})`)
        //                     })
        //                 })
        //                 $i.snippet(`}]`)
        //             })
        //             break
        //         case 'implementMe':
        //             pl.ss($, ($) => {
        //                 $i.snippet(`['implementMe', "${$}"]`)
        //             })
        //             break
        //         case 'mapArray':
        //             pl.ss($, ($) => {
        //                 $i.snippet(`['mapArray', {`)
        //                 $i.indent(($i) => {
        //                     $i.nestedLine(($i) => {
        //                         $i.snippet(`'block': `)
        //                         serializeFunctionBlock($.block, $i)
        //                         $i.snippet(`,`)
        //                     })
        //                 })
        //                 $i.snippet(`}]`)
        //             })
        //             break
        //         case 'mapDictionary':
        //             pl.ss($, ($) => {
        //                 $i.snippet(`['mapDictionary', {`)
        //                 $i.indent(($i) => {
        //                     $i.nestedLine(($i) => {
        //                         $i.snippet(`'block': `)
        //                         serializeFunctionBlock($.block, $i)
        //                         $i.snippet(`,`)
        //                     })
        //                 })
        //                 $i.snippet(`}]`)
        //             })
        //             break
        //         case 'propertySelection':
        //             pl.ss($, ($) => {
        //                 $i.snippet(`['propertySelection', {`)
        //                 $i.indent(($i) => {
        //                     $i.nestedLine(($i) => {
        //                         $i.snippet(`'name': ${$.name},`)
        //                     })
        //                 })
        //                 $i.snippet(`}]`)
        //             })
        //             break
        //         case 'switch':
        //             pl.ss($, ($) => {
        //                 $i.snippet(`['switch', {`)
        //                 $i.indent(($i) => {
        //                     $i.nestedLine(($i) => {
        //                         $i.snippet(`'cases': d({`)
        //                         $i.indent(($i) => {
        //                             $d.dictionaryForEach($.cases, ($) => {
        //                                 $i.nestedLine(($i) => {
        //                                     $i.snippet(`"${$.key}": `)
        //                                     serializeFunctionBlock($.value, $i)
        //                                     $i.snippet(`,`)
        //                                 })
        //                             })
        //                         })
        //                         $i.snippet(`})`)
        //                     })
        //                 })
        //                 $i.snippet(`}]`)
        //             })
        //             break
        //         default: pl.au($[0])
        //     }
        // }
        // function serializeFunctionBlock($: api.TFunctionBlock, $i: g_fp.B.Line) {
        //     $i.snippet(`{`)
        //     $i.indent(($i) => {
        //         $i.nestedLine(($i) => {
        //             $i.snippet(`'innerFunctions': d({`)
        //             $i.indent(($i) => {
        //                 if ($.innerFunctions !== undefined) {
        //                     $d.dictionaryForEach($.innerFunctions, ($) => {
        //                         $i.nestedLine(($i) => {
        //                             $i.snippet(`"${$.key}": {`)
        //                             $i.indent(($i) => {
        //                                 // $i.nestedLine(($i) => {
        //                                 //     $i.snippet(`'definition': `)
        //                                 //     serializeFunction($, $i)
        //                                 //     $i.snippet(`,`)
        //                                 // })
        //                                 $i.nestedLine(($i) => {
        //                                     $i.snippet(`'block': `)
        //                                     serializeFunctionBlock($.value.block, $i)
        //                                     $i.snippet(`,`)
        //                                 })
        //                             })
        //                             $i.snippet(`},`)
        //                         })
        //                     })
        //                 }
        //             })
        //             $i.snippet(`}),`)
        //         })
        //         $i.nestedLine(($i) => {
        //             $i.snippet(`'returnExpression': `)
        //             serializeExpression($.returnExpression, $i)
        //             $i.snippet(`,`)
        //         })
        //     })
        //     $i.snippet(`}`)
        // }
        // function serializeCallbackBlock($: api.TCallbackBlock, $i: g_fp.B.Line) {
        //     $i.snippet(`{`)
        //     $i.indent(($i) => {
        //         $i.nestedLine(($i) => {
        //             $i.snippet(`'innerCallbacks': d({`)
        //             $i.indent(($i) => {
        //                 if ($.innerCallbacks !== undefined) {
        //                     $d.dictionaryForEach($.innerCallbacks, ($) => {
        //                         $i.nestedLine(($i) => {
        //                             $i.snippet(`"${$.key}": {`)
        //                             $i.indent(($i) => {
        //                                 // $i.nestedLine(($i) => {
        //                                 //     $i.snippet(`'definition': `)
        //                                 //     serializeFunction($, $i)
        //                                 //     $i.snippet(`,`)
        //                                 // })
        //                                 $i.nestedLine(($i) => {
        //                                     $i.snippet(`'block': `)
        //                                     serializeCallbackBlock($.value.block, $i)
        //                                     $i.snippet(`,`)
        //                                 })
        //                             })
        //                             $i.snippet(`},`)
        //                         })
        //                     })
        //                 }
        //             })
        //             $i.snippet(`}),`)
        //         })
        //         $i.nestedLine(($i) => {
        //             $i.snippet(`'statements': d({`)
        //             $i.indent(($i) => {
        //                 $.statements.forEach(($) => {
        //                     switch ($[0]) {
        //                         case 'dependencyCall':
        //                             pl.ss($, ($) => {
        //                                 $.callback
        //                                 $.data
        //                             })
        //                             break
        //                         case 'interfaceCall':
        //                             pl.ss($, ($) => {
        //                                 $.callback
        //                                 $.data
        //                                 $.property
        //                             })
        //                             break
        //                         case 'innerCallbackCall':
        //                             pl.ss($, ($) => {
        //                                 $.data
        //                             })
        //                             break
        //                         case 'switch':
        //                             pl.ss($, ($) => {
        //                             })
        //                             break
        //                         default: pl.au($[0])
        //                     }
        //                     pd.implementMe(`SSDFSS`)
        //                 })
        //             })
        //             $i.snippet(`}),`)
        //         })
        //     })
        //     $i.snippet(`}`)
        // }
        $i.snippet(`{`);
        $i.indent(($i) => {
            $i.nestedLine(($i) => {
                $i.snippet(`'implementations': d({`);
                $i.indent(($i) => {
                    $d.dictionaryForEach($.implementations, ($) => {
                        $i.nestedLine(($i) => {
                            $i.snippet(`"${$.key}": {`);
                            $i.indent(($i) => {
                                $i.nestedLine(($i) => {
                                    $i.snippet(`'constructor': ${$.value.constructor ? `true` : `false`}`);
                                    $i.snippet(`,`);
                                });
                                $i.nestedLine(($i) => {
                                    $i.snippet(`'type': `);
                                    switch ($.value.type[0]) {
                                        case 'asynchronous function':
                                            pl.ss($.value.type, ($) => {
                                                $i.snippet(`['function', {`);
                                                $i.indent(($i) => {
                                                    $i.nestedLine(($i) => {
                                                        $i.snippet(`'block': `);
                                                        //serializeFunctionBlock($.block, $i)
                                                        $i.snippet(`,`);
                                                    });
                                                });
                                                $i.snippet(`}]`);
                                            });
                                            break;
                                        case 'synchronous function':
                                            pl.ss($.value.type, ($) => {
                                                $i.snippet(`['function', {`);
                                                $i.indent(($i) => {
                                                    $i.nestedLine(($i) => {
                                                        $i.snippet(`'block': `);
                                                        //serializeCallbackBlock($.block, $i)
                                                        $i.snippet(`,`);
                                                    });
                                                });
                                                $i.snippet(`}]`);
                                            });
                                            break;
                                        case 'procedure':
                                            pl.ss($.value.type, ($) => {
                                                $i.snippet(`['function', {`);
                                                $i.indent(($i) => {
                                                    $i.nestedLine(($i) => {
                                                        $i.snippet(`'block': `);
                                                        //serializeCallbackBlock($.block, $i)
                                                        $i.snippet(`,`);
                                                    });
                                                });
                                                $i.snippet(`}]`);
                                            });
                                            break;
                                        case 'interface initializer':
                                            pl.ss($.value.type, ($) => {
                                                $i.snippet(`['function', {`);
                                                $i.indent(($i) => {
                                                    $i.nestedLine(($i) => {
                                                        $i.snippet(`'block': `);
                                                        //serializeCallbackBlock($.block, $i)
                                                        $i.snippet(`,`);
                                                    });
                                                });
                                                $i.snippet(`}]`);
                                            });
                                            break;
                                        default: pl.au($.value.type[0]);
                                    }
                                    $i.snippet(`,`);
                                });
                            });
                            $i.snippet(`},`);
                        });
                    });
                });
                $i.snippet(`}),`);
            });
        });
        $i.snippet(`}`);
    };
};
exports.$$ = $$;
