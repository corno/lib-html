import * as pt from 'pareto-core-types';
import * as g_glossary from "../../glossary";
export declare namespace N {
    namespace AlgorithmTypeReference {
        namespace N {
            namespace G {
                namespace N {
                    namespace context {
                        namespace N { }
                        namespace T { }
                    }
                    namespace _$ltype {
                        namespace N {
                            namespace TU {
                                namespace N {
                                    namespace asynchronous {
                                        namespace N {
                                            namespace TU {
                                                namespace N {
                                                    namespace _$lconstructor {
                                                        namespace N {
                                                            namespace G {
                                                                namespace N {
                                                                    namespace _$lconstructor {
                                                                        namespace N { }
                                                                        namespace T { }
                                                                    }
                                                                }
                                                                namespace T { }
                                                            }
                                                        }
                                                        namespace T { }
                                                    }
                                                    namespace _$lfunction {
                                                        namespace N {
                                                            namespace G {
                                                                namespace N {
                                                                    namespace _$lfunction {
                                                                        namespace N { }
                                                                        namespace T { }
                                                                    }
                                                                }
                                                                namespace T { }
                                                            }
                                                        }
                                                        namespace T { }
                                                    }
                                                    namespace resource {
                                                        namespace N {
                                                            namespace G {
                                                                namespace N {
                                                                    namespace resource {
                                                                        namespace N { }
                                                                        namespace T { }
                                                                    }
                                                                }
                                                                namespace T { }
                                                            }
                                                        }
                                                        namespace T { }
                                                    }
                                                }
                                                namespace T { }
                                            }
                                        }
                                        namespace T { }
                                    }
                                    namespace synchronous {
                                        namespace N {
                                            namespace TU {
                                                namespace N {
                                                    namespace _$lfunction {
                                                        namespace N {
                                                            namespace G {
                                                                namespace N {
                                                                    namespace _$lfunction {
                                                                        namespace N { }
                                                                        namespace T { }
                                                                    }
                                                                }
                                                                namespace T { }
                                                            }
                                                        }
                                                        namespace T { }
                                                    }
                                                    namespace procedure {
                                                        namespace N {
                                                            namespace G {
                                                                namespace N {
                                                                    namespace procedure {
                                                                        namespace N { }
                                                                        namespace T { }
                                                                    }
                                                                }
                                                                namespace T { }
                                                            }
                                                        }
                                                        namespace T { }
                                                    }
                                                }
                                                namespace T { }
                                            }
                                        }
                                        namespace T { }
                                    }
                                }
                                namespace T { }
                            }
                        }
                        namespace T { }
                    }
                }
                namespace T { }
            }
        }
        namespace T { }
    }
    namespace Context {
        namespace N {
            namespace G {
                namespace N {
                    namespace arguments {
                        namespace N {
                            namespace D {
                                namespace N { }
                                namespace T { }
                            }
                        }
                        namespace T { }
                    }
                    namespace glossary {
                        namespace N { }
                        namespace T { }
                    }
                }
                namespace T { }
            }
        }
        namespace T { }
    }
    namespace Module {
        namespace N {
            namespace G {
                namespace N {
                    namespace definition {
                        namespace N { }
                        namespace T { }
                    }
                    namespace implementation {
                        namespace N {
                            namespace TU {
                                namespace N {
                                    namespace pareto {
                                        namespace N {
                                            namespace G {
                                                namespace N { }
                                                namespace T { }
                                            }
                                        }
                                        namespace T { }
                                    }
                                    namespace typescript {
                                        namespace N {
                                            namespace G {
                                                namespace N { }
                                                namespace T { }
                                            }
                                        }
                                        namespace T { }
                                    }
                                }
                                namespace T { }
                            }
                        }
                        namespace T { }
                    }
                }
                namespace T { }
            }
        }
        namespace T { }
    }
    namespace ModuleDefinition {
        namespace N {
            namespace G {
                namespace N {
                    namespace api {
                        namespace N {
                            namespace G {
                                namespace N {
                                    namespace imports {
                                        namespace N {
                                            namespace D {
                                                namespace N {
                                                    namespace TU {
                                                        namespace N {
                                                            namespace external {
                                                                namespace N { }
                                                                namespace T { }
                                                            }
                                                            namespace main {
                                                                namespace N {
                                                                    namespace G {
                                                                        namespace N { }
                                                                        namespace T { }
                                                                    }
                                                                }
                                                                namespace T { }
                                                            }
                                                            namespace sibling {
                                                                namespace N { }
                                                                namespace T { }
                                                            }
                                                            namespace submodule {
                                                                namespace N { }
                                                                namespace T { }
                                                            }
                                                            namespace _$lthis {
                                                                namespace N {
                                                                    namespace G {
                                                                        namespace N { }
                                                                        namespace T { }
                                                                    }
                                                                }
                                                                namespace T { }
                                                            }
                                                        }
                                                        namespace T { }
                                                    }
                                                }
                                                namespace T { }
                                            }
                                        }
                                        namespace T { }
                                    }
                                    namespace root {
                                        namespace N {
                                            namespace G {
                                                namespace N {
                                                    namespace algorithms {
                                                        namespace N {
                                                            namespace D {
                                                                namespace N {
                                                                    namespace G {
                                                                        namespace N {
                                                                            namespace definition {
                                                                                namespace N { }
                                                                                namespace T { }
                                                                            }
                                                                            namespace parameters {
                                                                                namespace N {
                                                                                    namespace D {
                                                                                        namespace N { }
                                                                                        namespace T { }
                                                                                    }
                                                                                }
                                                                                namespace T { }
                                                                            }
                                                                            namespace _$ltype {
                                                                                namespace N {
                                                                                    namespace TU {
                                                                                        namespace N {
                                                                                            namespace dependent {
                                                                                                namespace N {
                                                                                                    namespace G {
                                                                                                        namespace N {
                                                                                                            namespace configuration_$_$data {
                                                                                                                namespace N {
                                                                                                                    namespace O {
                                                                                                                        namespace N {
                                                                                                                            namespace G {
                                                                                                                                namespace N {
                                                                                                                                    namespace context {
                                                                                                                                        namespace N { }
                                                                                                                                        namespace T { }
                                                                                                                                    }
                                                                                                                                    namespace _$ltype {
                                                                                                                                        namespace N { }
                                                                                                                                        namespace T { }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                namespace T { }
                                                                                                                            }
                                                                                                                        }
                                                                                                                        namespace T { }
                                                                                                                    }
                                                                                                                }
                                                                                                                namespace T { }
                                                                                                            }
                                                                                                            namespace dependencies {
                                                                                                                namespace N {
                                                                                                                    namespace D {
                                                                                                                        namespace N { }
                                                                                                                        namespace T { }
                                                                                                                    }
                                                                                                                }
                                                                                                                namespace T { }
                                                                                                            }
                                                                                                            namespace side_$_$effects {
                                                                                                                namespace N {
                                                                                                                    namespace D {
                                                                                                                        namespace N {
                                                                                                                            namespace G {
                                                                                                                                namespace N {
                                                                                                                                    namespace context {
                                                                                                                                        namespace N { }
                                                                                                                                        namespace T { }
                                                                                                                                    }
                                                                                                                                    namespace _$ltype {
                                                                                                                                        namespace N {
                                                                                                                                            namespace TU {
                                                                                                                                                namespace N {
                                                                                                                                                    namespace asynchronous {
                                                                                                                                                        namespace N {
                                                                                                                                                            namespace G {
                                                                                                                                                                namespace N {
                                                                                                                                                                    namespace _$linterface {
                                                                                                                                                                        namespace N { }
                                                                                                                                                                        namespace T { }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                namespace T { }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        namespace T { }
                                                                                                                                                    }
                                                                                                                                                    namespace synchronous {
                                                                                                                                                        namespace N {
                                                                                                                                                            namespace G {
                                                                                                                                                                namespace N {
                                                                                                                                                                    namespace _$linterface {
                                                                                                                                                                        namespace N { }
                                                                                                                                                                        namespace T { }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                namespace T { }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        namespace T { }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                namespace T { }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        namespace T { }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                namespace T { }
                                                                                                                            }
                                                                                                                        }
                                                                                                                        namespace T { }
                                                                                                                    }
                                                                                                                }
                                                                                                                namespace T { }
                                                                                                            }
                                                                                                        }
                                                                                                        namespace T { }
                                                                                                    }
                                                                                                }
                                                                                                namespace T { }
                                                                                            }
                                                                                            namespace independent {
                                                                                                namespace N {
                                                                                                    namespace G {
                                                                                                        namespace N { }
                                                                                                        namespace T { }
                                                                                                    }
                                                                                                }
                                                                                                namespace T { }
                                                                                            }
                                                                                        }
                                                                                        namespace T { }
                                                                                    }
                                                                                }
                                                                                namespace T { }
                                                                            }
                                                                        }
                                                                        namespace T { }
                                                                    }
                                                                }
                                                                namespace T { }
                                                            }
                                                        }
                                                        namespace T { }
                                                    }
                                                }
                                                namespace T { }
                                            }
                                        }
                                        namespace T { }
                                    }
                                }
                                namespace T { }
                            }
                        }
                        namespace T { }
                    }
                    namespace glossary {
                        namespace N {
                            namespace G {
                                namespace N {
                                    namespace imports {
                                        namespace N {
                                            namespace D {
                                                namespace N {
                                                    namespace TU {
                                                        namespace N {
                                                            namespace external {
                                                                namespace N { }
                                                                namespace T { }
                                                            }
                                                            namespace main {
                                                                namespace N {
                                                                    namespace G {
                                                                        namespace N { }
                                                                        namespace T { }
                                                                    }
                                                                }
                                                                namespace T { }
                                                            }
                                                            namespace sibling {
                                                                namespace N { }
                                                                namespace T { }
                                                            }
                                                            namespace temp_$_$submodule {
                                                                namespace N { }
                                                                namespace T { }
                                                            }
                                                        }
                                                        namespace T { }
                                                    }
                                                }
                                                namespace T { }
                                            }
                                        }
                                        namespace T { }
                                    }
                                    namespace root {
                                        namespace N { }
                                        namespace T { }
                                    }
                                }
                                namespace T { }
                            }
                        }
                        namespace T { }
                    }
                }
                namespace T { }
            }
        }
        namespace T { }
    }
    namespace Project {
        namespace N {
            namespace G {
                namespace N {
                    namespace author {
                        namespace N { }
                        namespace T { }
                    }
                    namespace dependencies {
                        namespace N {
                            namespace D {
                                namespace N {
                                    namespace G {
                                        namespace N { }
                                        namespace T { }
                                    }
                                }
                                namespace T { }
                            }
                        }
                        namespace T { }
                    }
                    namespace description {
                        namespace N { }
                        namespace T { }
                    }
                    namespace license {
                        namespace N { }
                        namespace T { }
                    }
                    namespace _$ltype {
                        namespace N {
                            namespace TU {
                                namespace N {
                                    namespace glossary {
                                        namespace N {
                                            namespace G {
                                                namespace N {
                                                    namespace imports {
                                                        namespace N {
                                                            namespace D {
                                                                namespace N {
                                                                    namespace TU {
                                                                        namespace N {
                                                                            namespace external {
                                                                                namespace N { }
                                                                                namespace T { }
                                                                            }
                                                                        }
                                                                        namespace T { }
                                                                    }
                                                                }
                                                                namespace T { }
                                                            }
                                                        }
                                                        namespace T { }
                                                    }
                                                    namespace root {
                                                        namespace N { }
                                                        namespace T { }
                                                    }
                                                }
                                                namespace T { }
                                            }
                                        }
                                        namespace T { }
                                    }
                                    namespace library {
                                        namespace N {
                                            namespace G {
                                                namespace N {
                                                    namespace bindings {
                                                        namespace N {
                                                            namespace O {
                                                                namespace N {
                                                                    namespace G {
                                                                        namespace N {
                                                                            namespace definition {
                                                                                namespace N { }
                                                                                namespace T { }
                                                                            }
                                                                            namespace implementation {
                                                                                namespace N {
                                                                                    namespace TU {
                                                                                        namespace N {
                                                                                            namespace pareto {
                                                                                                namespace N {
                                                                                                    namespace G {
                                                                                                        namespace N { }
                                                                                                        namespace T { }
                                                                                                    }
                                                                                                }
                                                                                                namespace T { }
                                                                                            }
                                                                                            namespace typescript {
                                                                                                namespace N {
                                                                                                    namespace G {
                                                                                                        namespace N { }
                                                                                                        namespace T { }
                                                                                                    }
                                                                                                }
                                                                                                namespace T { }
                                                                                            }
                                                                                        }
                                                                                        namespace T { }
                                                                                    }
                                                                                }
                                                                                namespace T { }
                                                                            }
                                                                        }
                                                                        namespace T { }
                                                                    }
                                                                }
                                                                namespace T { }
                                                            }
                                                        }
                                                        namespace T { }
                                                    }
                                                    namespace executables {
                                                        namespace N {
                                                            namespace D {
                                                                namespace N {
                                                                    namespace G {
                                                                        namespace N {
                                                                            namespace _$lconstructor {
                                                                                namespace N { }
                                                                                namespace T { }
                                                                            }
                                                                        }
                                                                        namespace T { }
                                                                    }
                                                                }
                                                                namespace T { }
                                                            }
                                                        }
                                                        namespace T { }
                                                    }
                                                    namespace main {
                                                        namespace N { }
                                                        namespace T { }
                                                    }
                                                    namespace submodules {
                                                        namespace N {
                                                            namespace D {
                                                                namespace N { }
                                                                namespace T { }
                                                            }
                                                        }
                                                        namespace T { }
                                                    }
                                                    namespace test {
                                                        namespace N { }
                                                        namespace T { }
                                                    }
                                                }
                                                namespace T { }
                                            }
                                        }
                                        namespace T { }
                                    }
                                    namespace resource {
                                        namespace N {
                                            namespace G {
                                                namespace N {
                                                    namespace definition {
                                                        namespace N { }
                                                        namespace T { }
                                                    }
                                                    namespace temp {
                                                        namespace N {
                                                            namespace G {
                                                                namespace N {
                                                                    namespace devDependencies {
                                                                        namespace N {
                                                                            namespace D {
                                                                                namespace N {
                                                                                    namespace G {
                                                                                        namespace N { }
                                                                                        namespace T { }
                                                                                    }
                                                                                }
                                                                                namespace T { }
                                                                            }
                                                                        }
                                                                        namespace T { }
                                                                    }
                                                                    namespace nativeDependencies {
                                                                        namespace N {
                                                                            namespace D {
                                                                                namespace N {
                                                                                    namespace G {
                                                                                        namespace N { }
                                                                                        namespace T { }
                                                                                    }
                                                                                }
                                                                                namespace T { }
                                                                            }
                                                                        }
                                                                        namespace T { }
                                                                    }
                                                                }
                                                                namespace T { }
                                                            }
                                                        }
                                                        namespace T { }
                                                    }
                                                    namespace test {
                                                        namespace N { }
                                                        namespace T { }
                                                    }
                                                }
                                                namespace T { }
                                            }
                                        }
                                        namespace T { }
                                    }
                                }
                                namespace T { }
                            }
                        }
                        namespace T { }
                    }
                }
                namespace T { }
            }
        }
        namespace T { }
    }
    namespace Test {
        namespace N {
            namespace G {
                namespace N {
                    namespace definition {
                        namespace N { }
                        namespace T { }
                    }
                    namespace dependencies {
                        namespace N {
                            namespace D {
                                namespace N {
                                    namespace G {
                                        namespace N { }
                                        namespace T { }
                                    }
                                }
                                namespace T { }
                            }
                        }
                        namespace T { }
                    }
                    namespace imports {
                        namespace N {
                            namespace D {
                                namespace N {
                                    namespace TU {
                                        namespace N {
                                            namespace external {
                                                namespace N { }
                                                namespace T { }
                                            }
                                            namespace pub {
                                                namespace N { }
                                                namespace T { }
                                            }
                                            namespace _$lthis {
                                                namespace N {
                                                    namespace G {
                                                        namespace N { }
                                                        namespace T { }
                                                    }
                                                }
                                                namespace T { }
                                            }
                                        }
                                        namespace T { }
                                    }
                                }
                                namespace T { }
                            }
                        }
                        namespace T { }
                    }
                }
                namespace T { }
            }
        }
        namespace T { }
    }
}
export declare namespace T {
    namespace AlgorithmTypeReference {
        type context<GAnnotation> = T.Context<GAnnotation>;
        namespace _ltype {
            namespace asynchronous {
                namespace _lconstructor {
                    type _lconstructor<GAnnotation> = string;
                }
                type _lconstructor<GAnnotation> = {
                    readonly 'constructor': string;
                };
                namespace _lfunction {
                    type _lfunction<GAnnotation> = string;
                }
                type _lfunction<GAnnotation> = {
                    readonly 'function': string;
                };
                namespace resource {
                    type resource<GAnnotation> = string;
                }
                type resource<GAnnotation> = {
                    readonly 'resource': string;
                };
            }
            type asynchronous<GAnnotation> = [
                'constructor',
                {
                    readonly 'constructor': string;
                }
            ] | [
                'function',
                {
                    readonly 'function': string;
                }
            ] | [
                'resource',
                {
                    readonly 'resource': string;
                }
            ];
            namespace synchronous {
                namespace _lfunction {
                    type _lfunction<GAnnotation> = string;
                }
                type _lfunction<GAnnotation> = {
                    readonly 'function': string;
                };
                namespace procedure {
                    type procedure<GAnnotation> = string;
                }
                type procedure<GAnnotation> = {
                    readonly 'procedure': string;
                };
            }
            type synchronous<GAnnotation> = [
                'function',
                {
                    readonly 'function': string;
                }
            ] | [
                'procedure',
                {
                    readonly 'procedure': string;
                }
            ];
        }
        type _ltype<GAnnotation> = [
            'asynchronous',
            [
                'constructor',
                {
                    readonly 'constructor': string;
                }
            ] | [
                'function',
                {
                    readonly 'function': string;
                }
            ] | [
                'resource',
                {
                    readonly 'resource': string;
                }
            ]
        ] | [
            'synchronous',
            [
                'function',
                {
                    readonly 'function': string;
                }
            ] | [
                'procedure',
                {
                    readonly 'procedure': string;
                }
            ]
        ];
    }
    type AlgorithmTypeReference<GAnnotation> = {
        readonly 'context': T.Context<GAnnotation>;
        readonly 'type': [
            'asynchronous',
            [
                'constructor',
                {
                    readonly 'constructor': string;
                }
            ] | [
                'function',
                {
                    readonly 'function': string;
                }
            ] | [
                'resource',
                {
                    readonly 'resource': string;
                }
            ]
        ] | [
            'synchronous',
            [
                'function',
                {
                    readonly 'function': string;
                }
            ] | [
                'procedure',
                {
                    readonly 'procedure': string;
                }
            ]
        ];
    };
    namespace Context {
        namespace arguments {
            type D<GAnnotation> = string;
        }
        type arguments<GAnnotation> = pt.Dictionary<string>;
        type glossary<GAnnotation> = string;
    }
    type Context<GAnnotation> = {
        readonly 'arguments': pt.Dictionary<string>;
        readonly 'glossary': string;
    };
    namespace Module {
        type definition<GAnnotation> = T.ModuleDefinition<GAnnotation>;
        namespace implementation {
            namespace pareto { }
            type pareto<GAnnotation> = null;
            namespace typescript { }
            type typescript<GAnnotation> = null;
        }
        type implementation<GAnnotation> = ['pareto', null] | ['typescript', null];
    }
    type Module<GAnnotation> = {
        readonly 'definition': T.ModuleDefinition<GAnnotation>;
        readonly 'implementation': ['pareto', null] | ['typescript', null];
    };
    namespace ModuleDefinition {
        namespace api {
            namespace imports {
                namespace D {
                    type external<GAnnotation> = string;
                    namespace main { }
                    type main<GAnnotation> = null;
                    type sibling<GAnnotation> = string;
                    type submodule<GAnnotation> = string;
                    namespace _lthis { }
                    type _lthis<GAnnotation> = null;
                }
                type D<GAnnotation> = ['external', string] | ['main', null] | ['sibling', string] | ['submodule', string] | ['this', null];
            }
            type imports<GAnnotation> = pt.Dictionary<['external', string] | ['main', null] | ['sibling', string] | ['submodule', string] | ['this', null]>;
            namespace root {
                namespace algorithms {
                    namespace D {
                        type definition<GAnnotation> = T.AlgorithmTypeReference<GAnnotation>;
                        namespace parameters {
                            type D<GAnnotation> = string;
                        }
                        type parameters<GAnnotation> = pt.Dictionary<string>;
                        namespace _ltype {
                            namespace dependent {
                                namespace configuration__data {
                                    namespace O {
                                        type context<GAnnotation> = T.Context<GAnnotation>;
                                        type _ltype<GAnnotation> = string;
                                    }
                                    type O<GAnnotation> = {
                                        readonly 'context': T.Context<GAnnotation>;
                                        readonly 'type': string;
                                    };
                                }
                                type configuration__data<GAnnotation> = [false] | [
                                    true,
                                    {
                                        readonly 'context': T.Context<GAnnotation>;
                                        readonly 'type': string;
                                    }
                                ];
                                namespace dependencies {
                                    type D<GAnnotation> = T.AlgorithmTypeReference<GAnnotation>;
                                }
                                type dependencies<GAnnotation> = pt.Dictionary<T.AlgorithmTypeReference<GAnnotation>>;
                                namespace side__effects {
                                    namespace D {
                                        type context<GAnnotation> = T.Context<GAnnotation>;
                                        namespace _ltype {
                                            namespace asynchronous {
                                                type _linterface<GAnnotation> = string;
                                            }
                                            type asynchronous<GAnnotation> = {
                                                readonly 'interface': string;
                                            };
                                            namespace synchronous {
                                                type _linterface<GAnnotation> = string;
                                            }
                                            type synchronous<GAnnotation> = {
                                                readonly 'interface': string;
                                            };
                                        }
                                        type _ltype<GAnnotation> = [
                                            'asynchronous',
                                            {
                                                readonly 'interface': string;
                                            }
                                        ] | [
                                            'synchronous',
                                            {
                                                readonly 'interface': string;
                                            }
                                        ];
                                    }
                                    type D<GAnnotation> = {
                                        readonly 'context': T.Context<GAnnotation>;
                                        readonly 'type': [
                                            'asynchronous',
                                            {
                                                readonly 'interface': string;
                                            }
                                        ] | [
                                            'synchronous',
                                            {
                                                readonly 'interface': string;
                                            }
                                        ];
                                    };
                                }
                                type side__effects<GAnnotation> = pt.Dictionary<{
                                    readonly 'context': T.Context<GAnnotation>;
                                    readonly 'type': [
                                        'asynchronous',
                                        {
                                            readonly 'interface': string;
                                        }
                                    ] | [
                                        'synchronous',
                                        {
                                            readonly 'interface': string;
                                        }
                                    ];
                                }>;
                            }
                            type dependent<GAnnotation> = {
                                readonly 'configuration data': [false] | [
                                    true,
                                    {
                                        readonly 'context': T.Context<GAnnotation>;
                                        readonly 'type': string;
                                    }
                                ];
                                readonly 'dependencies': pt.Dictionary<T.AlgorithmTypeReference<GAnnotation>>;
                                readonly 'side effects': pt.Dictionary<{
                                    readonly 'context': T.Context<GAnnotation>;
                                    readonly 'type': [
                                        'asynchronous',
                                        {
                                            readonly 'interface': string;
                                        }
                                    ] | [
                                        'synchronous',
                                        {
                                            readonly 'interface': string;
                                        }
                                    ];
                                }>;
                            };
                            namespace independent { }
                            type independent<GAnnotation> = null;
                        }
                        type _ltype<GAnnotation> = [
                            'dependent',
                            {
                                readonly 'configuration data': [false] | [
                                    true,
                                    {
                                        readonly 'context': T.Context<GAnnotation>;
                                        readonly 'type': string;
                                    }
                                ];
                                readonly 'dependencies': pt.Dictionary<T.AlgorithmTypeReference<GAnnotation>>;
                                readonly 'side effects': pt.Dictionary<{
                                    readonly 'context': T.Context<GAnnotation>;
                                    readonly 'type': [
                                        'asynchronous',
                                        {
                                            readonly 'interface': string;
                                        }
                                    ] | [
                                        'synchronous',
                                        {
                                            readonly 'interface': string;
                                        }
                                    ];
                                }>;
                            }
                        ] | ['independent', null];
                    }
                    type D<GAnnotation> = {
                        readonly 'definition': T.AlgorithmTypeReference<GAnnotation>;
                        readonly 'parameters': pt.Dictionary<string>;
                        readonly 'type': [
                            'dependent',
                            {
                                readonly 'configuration data': [false] | [
                                    true,
                                    {
                                        readonly 'context': T.Context<GAnnotation>;
                                        readonly 'type': string;
                                    }
                                ];
                                readonly 'dependencies': pt.Dictionary<T.AlgorithmTypeReference<GAnnotation>>;
                                readonly 'side effects': pt.Dictionary<{
                                    readonly 'context': T.Context<GAnnotation>;
                                    readonly 'type': [
                                        'asynchronous',
                                        {
                                            readonly 'interface': string;
                                        }
                                    ] | [
                                        'synchronous',
                                        {
                                            readonly 'interface': string;
                                        }
                                    ];
                                }>;
                            }
                        ] | ['independent', null];
                    };
                }
                type algorithms<GAnnotation> = pt.Dictionary<{
                    readonly 'definition': T.AlgorithmTypeReference<GAnnotation>;
                    readonly 'parameters': pt.Dictionary<string>;
                    readonly 'type': [
                        'dependent',
                        {
                            readonly 'configuration data': [false] | [
                                true,
                                {
                                    readonly 'context': T.Context<GAnnotation>;
                                    readonly 'type': string;
                                }
                            ];
                            readonly 'dependencies': pt.Dictionary<T.AlgorithmTypeReference<GAnnotation>>;
                            readonly 'side effects': pt.Dictionary<{
                                readonly 'context': T.Context<GAnnotation>;
                                readonly 'type': [
                                    'asynchronous',
                                    {
                                        readonly 'interface': string;
                                    }
                                ] | [
                                    'synchronous',
                                    {
                                        readonly 'interface': string;
                                    }
                                ];
                            }>;
                        }
                    ] | ['independent', null];
                }>;
            }
            type root<GAnnotation> = {
                readonly 'algorithms': pt.Dictionary<{
                    readonly 'definition': T.AlgorithmTypeReference<GAnnotation>;
                    readonly 'parameters': pt.Dictionary<string>;
                    readonly 'type': [
                        'dependent',
                        {
                            readonly 'configuration data': [false] | [
                                true,
                                {
                                    readonly 'context': T.Context<GAnnotation>;
                                    readonly 'type': string;
                                }
                            ];
                            readonly 'dependencies': pt.Dictionary<T.AlgorithmTypeReference<GAnnotation>>;
                            readonly 'side effects': pt.Dictionary<{
                                readonly 'context': T.Context<GAnnotation>;
                                readonly 'type': [
                                    'asynchronous',
                                    {
                                        readonly 'interface': string;
                                    }
                                ] | [
                                    'synchronous',
                                    {
                                        readonly 'interface': string;
                                    }
                                ];
                            }>;
                        }
                    ] | ['independent', null];
                }>;
            };
        }
        type api<GAnnotation> = {
            readonly 'imports': pt.Dictionary<['external', string] | ['main', null] | ['sibling', string] | ['submodule', string] | ['this', null]>;
            readonly 'root': {
                readonly 'algorithms': pt.Dictionary<{
                    readonly 'definition': T.AlgorithmTypeReference<GAnnotation>;
                    readonly 'parameters': pt.Dictionary<string>;
                    readonly 'type': [
                        'dependent',
                        {
                            readonly 'configuration data': [false] | [
                                true,
                                {
                                    readonly 'context': T.Context<GAnnotation>;
                                    readonly 'type': string;
                                }
                            ];
                            readonly 'dependencies': pt.Dictionary<T.AlgorithmTypeReference<GAnnotation>>;
                            readonly 'side effects': pt.Dictionary<{
                                readonly 'context': T.Context<GAnnotation>;
                                readonly 'type': [
                                    'asynchronous',
                                    {
                                        readonly 'interface': string;
                                    }
                                ] | [
                                    'synchronous',
                                    {
                                        readonly 'interface': string;
                                    }
                                ];
                            }>;
                        }
                    ] | ['independent', null];
                }>;
            };
        };
        namespace glossary {
            namespace imports {
                namespace D {
                    type external<GAnnotation> = string;
                    namespace main { }
                    type main<GAnnotation> = null;
                    type sibling<GAnnotation> = string;
                    type temp__submodule<GAnnotation> = string;
                }
                type D<GAnnotation> = ['external', string] | ['main', null] | ['sibling', string] | ['temp submodule', string];
            }
            type imports<GAnnotation> = pt.Dictionary<['external', string] | ['main', null] | ['sibling', string] | ['temp submodule', string]>;
            type root<GAnnotation> = g_glossary.T.Glossary<GAnnotation>;
        }
        type glossary<GAnnotation> = {
            readonly 'imports': pt.Dictionary<['external', string] | ['main', null] | ['sibling', string] | ['temp submodule', string]>;
            readonly 'root': g_glossary.T.Glossary<GAnnotation>;
        };
    }
    type ModuleDefinition<GAnnotation> = {
        readonly 'api': {
            readonly 'imports': pt.Dictionary<['external', string] | ['main', null] | ['sibling', string] | ['submodule', string] | ['this', null]>;
            readonly 'root': {
                readonly 'algorithms': pt.Dictionary<{
                    readonly 'definition': T.AlgorithmTypeReference<GAnnotation>;
                    readonly 'parameters': pt.Dictionary<string>;
                    readonly 'type': [
                        'dependent',
                        {
                            readonly 'configuration data': [false] | [
                                true,
                                {
                                    readonly 'context': T.Context<GAnnotation>;
                                    readonly 'type': string;
                                }
                            ];
                            readonly 'dependencies': pt.Dictionary<T.AlgorithmTypeReference<GAnnotation>>;
                            readonly 'side effects': pt.Dictionary<{
                                readonly 'context': T.Context<GAnnotation>;
                                readonly 'type': [
                                    'asynchronous',
                                    {
                                        readonly 'interface': string;
                                    }
                                ] | [
                                    'synchronous',
                                    {
                                        readonly 'interface': string;
                                    }
                                ];
                            }>;
                        }
                    ] | ['independent', null];
                }>;
            };
        };
        readonly 'glossary': {
            readonly 'imports': pt.Dictionary<['external', string] | ['main', null] | ['sibling', string] | ['temp submodule', string]>;
            readonly 'root': g_glossary.T.Glossary<GAnnotation>;
        };
    };
    namespace Project {
        type author<GAnnotation> = string;
        namespace dependencies {
            namespace D { }
            type D<GAnnotation> = null;
        }
        type dependencies<GAnnotation> = pt.Dictionary<null>;
        type description<GAnnotation> = string;
        type license<GAnnotation> = string;
        namespace _ltype {
            namespace glossary {
                namespace imports {
                    namespace D {
                        type external<GAnnotation> = string;
                    }
                    type D<GAnnotation> = ['external', string];
                }
                type imports<GAnnotation> = pt.Dictionary<['external', string]>;
                type root<GAnnotation> = g_glossary.T.Glossary<GAnnotation>;
            }
            type glossary<GAnnotation> = {
                readonly 'imports': pt.Dictionary<['external', string]>;
                readonly 'root': g_glossary.T.Glossary<GAnnotation>;
            };
            namespace library {
                namespace bindings {
                    namespace O {
                        type definition<GAnnotation> = T.ModuleDefinition<GAnnotation>;
                        namespace implementation {
                            namespace pareto { }
                            type pareto<GAnnotation> = null;
                            namespace typescript { }
                            type typescript<GAnnotation> = null;
                        }
                        type implementation<GAnnotation> = ['pareto', null] | ['typescript', null];
                    }
                    type O<GAnnotation> = {
                        readonly 'definition': T.ModuleDefinition<GAnnotation>;
                        readonly 'implementation': ['pareto', null] | ['typescript', null];
                    };
                }
                type bindings<GAnnotation> = [false] | [
                    true,
                    {
                        readonly 'definition': T.ModuleDefinition<GAnnotation>;
                        readonly 'implementation': ['pareto', null] | ['typescript', null];
                    }
                ];
                namespace executables {
                    namespace D {
                        type _lconstructor<GAnnotation> = string;
                    }
                    type D<GAnnotation> = {
                        readonly 'constructor': string;
                    };
                }
                type executables<GAnnotation> = pt.Dictionary<{
                    readonly 'constructor': string;
                }>;
                type main<GAnnotation> = T.Module<GAnnotation>;
                namespace submodules {
                    type D<GAnnotation> = T.Module<GAnnotation>;
                }
                type submodules<GAnnotation> = pt.Dictionary<T.Module<GAnnotation>>;
                type test<GAnnotation> = T.Test<GAnnotation>;
            }
            type library<GAnnotation> = {
                readonly 'bindings': [false] | [
                    true,
                    {
                        readonly 'definition': T.ModuleDefinition<GAnnotation>;
                        readonly 'implementation': ['pareto', null] | ['typescript', null];
                    }
                ];
                readonly 'executables': pt.Dictionary<{
                    readonly 'constructor': string;
                }>;
                readonly 'main': T.Module<GAnnotation>;
                readonly 'submodules': pt.Dictionary<T.Module<GAnnotation>>;
                readonly 'test': T.Test<GAnnotation>;
            };
            namespace resource {
                type definition<GAnnotation> = T.ModuleDefinition<GAnnotation>;
                namespace temp {
                    namespace devDependencies {
                        namespace D { }
                        type D<GAnnotation> = null;
                    }
                    type devDependencies<GAnnotation> = pt.Dictionary<null>;
                    namespace nativeDependencies {
                        namespace D { }
                        type D<GAnnotation> = null;
                    }
                    type nativeDependencies<GAnnotation> = pt.Dictionary<null>;
                }
                type temp<GAnnotation> = {
                    readonly 'devDependencies': pt.Dictionary<null>;
                    readonly 'nativeDependencies': pt.Dictionary<null>;
                };
                type test<GAnnotation> = T.Test<GAnnotation>;
            }
            type resource<GAnnotation> = {
                readonly 'definition': T.ModuleDefinition<GAnnotation>;
                readonly 'temp': {
                    readonly 'devDependencies': pt.Dictionary<null>;
                    readonly 'nativeDependencies': pt.Dictionary<null>;
                };
                readonly 'test': T.Test<GAnnotation>;
            };
        }
        type _ltype<GAnnotation> = [
            'glossary',
            {
                readonly 'imports': pt.Dictionary<['external', string]>;
                readonly 'root': g_glossary.T.Glossary<GAnnotation>;
            }
        ] | [
            'library',
            {
                readonly 'bindings': [false] | [
                    true,
                    {
                        readonly 'definition': T.ModuleDefinition<GAnnotation>;
                        readonly 'implementation': ['pareto', null] | ['typescript', null];
                    }
                ];
                readonly 'executables': pt.Dictionary<{
                    readonly 'constructor': string;
                }>;
                readonly 'main': T.Module<GAnnotation>;
                readonly 'submodules': pt.Dictionary<T.Module<GAnnotation>>;
                readonly 'test': T.Test<GAnnotation>;
            }
        ] | [
            'resource',
            {
                readonly 'definition': T.ModuleDefinition<GAnnotation>;
                readonly 'temp': {
                    readonly 'devDependencies': pt.Dictionary<null>;
                    readonly 'nativeDependencies': pt.Dictionary<null>;
                };
                readonly 'test': T.Test<GAnnotation>;
            }
        ];
    }
    type Project<GAnnotation> = {
        readonly 'author': string;
        readonly 'dependencies': pt.Dictionary<null>;
        readonly 'description': string;
        readonly 'license': string;
        readonly 'type': [
            'glossary',
            {
                readonly 'imports': pt.Dictionary<['external', string]>;
                readonly 'root': g_glossary.T.Glossary<GAnnotation>;
            }
        ] | [
            'library',
            {
                readonly 'bindings': [false] | [
                    true,
                    {
                        readonly 'definition': T.ModuleDefinition<GAnnotation>;
                        readonly 'implementation': ['pareto', null] | ['typescript', null];
                    }
                ];
                readonly 'executables': pt.Dictionary<{
                    readonly 'constructor': string;
                }>;
                readonly 'main': T.Module<GAnnotation>;
                readonly 'submodules': pt.Dictionary<T.Module<GAnnotation>>;
                readonly 'test': T.Test<GAnnotation>;
            }
        ] | [
            'resource',
            {
                readonly 'definition': T.ModuleDefinition<GAnnotation>;
                readonly 'temp': {
                    readonly 'devDependencies': pt.Dictionary<null>;
                    readonly 'nativeDependencies': pt.Dictionary<null>;
                };
                readonly 'test': T.Test<GAnnotation>;
            }
        ];
    };
    namespace Test {
        type definition<GAnnotation> = T.ModuleDefinition<GAnnotation>;
        namespace dependencies {
            namespace D { }
            type D<GAnnotation> = null;
        }
        type dependencies<GAnnotation> = pt.Dictionary<null>;
        namespace imports {
            namespace D {
                type external<GAnnotation> = string;
                type pub<GAnnotation> = string;
                namespace _lthis { }
                type _lthis<GAnnotation> = null;
            }
            type D<GAnnotation> = ['external', string] | ['pub', string] | ['this', null];
        }
        type imports<GAnnotation> = pt.Dictionary<['external', string] | ['pub', string] | ['this', null]>;
    }
    type Test<GAnnotation> = {
        readonly 'definition': T.ModuleDefinition<GAnnotation>;
        readonly 'dependencies': pt.Dictionary<null>;
        readonly 'imports': pt.Dictionary<['external', string] | ['pub', string] | ['this', null]>;
    };
}
