"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$$ = void 0;
const pl = __importStar(require("pareto-core-lib"));
function tempoptional($, a, b) {
    return tempoptional($, a, b);
}
const $$ = ($d, $se) => {
    function map_Arguments($, $v_glossary__parameters, $v_imports, $v_parameters, $v_type__parameters) {
        return $d.resolveDictionary($, { 'map': ($, $l) => pl.cc($.value, ($) => map_DataSpecifier($, tempoptional /*3*/($v_glossary__parameters, ($) => [true, $], () => [false]), //$v_glossary__parameters
            tempoptional /*3*/($v_imports, ($) => [true, $], () => [false]), //$v_imports
            tempoptional /*3*/($v_type__parameters, ($) => [true, $], () => [false]))) });
    }
    function map_AsynchronousInterface($, $v_glossary__parameters, $v_imports, $v_type__parameters) {
        return pl.cc($, ($) => {
            switch ($[0]) {
                case 'choice': return pl.ss($, ($) => ['choice', pl.cc($, ($) => {
                        const $p_options = pl.cc($['options'], ($) => $d.resolveDictionary($, { 'map': ($, $l) => pl.cc($.value, ($) => map_AsynchronousInterface($, tempoptional /*3*/($v_glossary__parameters, ($) => [true, $], () => [false]), //$v_glossary__parameters
                            tempoptional /*3*/($v_imports, ($) => [true, $], () => [false]), //$v_imports
                            tempoptional /*3*/($v_type__parameters, ($) => [true, $], () => [false]))) }));
                        const $v_options = [true, $p_options];
                        return {
                            'options': $p_options,
                        };
                    })]);
                case 'method': return pl.ss($, ($) => ['method', pl.cc($, ($) => {
                        const $p_data = pl.cc($['data'], ($) => tempoptional /*4*/($, ($) => [true, map_DataSpecifier($, tempoptional /*3*/($v_glossary__parameters, ($) => [true, $], () => [false]), //$v_glossary__parameters
                            tempoptional /*3*/($v_imports, ($) => [true, $], () => [false]), //$v_imports
                            tempoptional /*3*/($v_type__parameters, ($) => [true, $], () => [false]))], () => [false]));
                        const $v_data = [true, $p_data];
                        const $p__linterface = pl.cc($['interface'], ($) => tempoptional /*4*/($, ($) => [true, map_AsynchronousInterface($, tempoptional /*3*/($v_glossary__parameters, ($) => [true, $], () => [false]), //$v_glossary__parameters
                            tempoptional /*3*/($v_imports, ($) => [true, $], () => [false]), //$v_imports
                            tempoptional /*3*/($v_type__parameters, ($) => [true, $], () => [false]))], () => [false]));
                        const $v__linterface = [true, $p__linterface];
                        return {
                            'data': $p_data,
                            'interface': $p__linterface,
                        };
                    })]);
                case 'reference': return pl.ss($, ($) => ['reference', map_AsynchronousInterfaceReference($, tempoptional /*3*/($v_glossary__parameters, ($) => [true, $], () => [false]), //$v_glossary__parameters
                    tempoptional /*3*/($v_imports, ($) => [true, $], () => [false]), //$v_imports
                    tempoptional /*3*/($v_type__parameters, ($) => [true, $], () => [false]))]);
                case 'streamconsumer': return pl.ss($, ($) => ['streamconsumer', pl.cc($, ($) => {
                        const $p_data = pl.cc($['data'], ($) => map_AsynchronousInterface($, tempoptional /*3*/($v_glossary__parameters, ($) => [true, $], () => [false]), //$v_glossary__parameters
                        tempoptional /*3*/($v_imports, ($) => [true, $], () => [false]), //$v_imports
                        tempoptional /*3*/($v_type__parameters, ($) => [true, $], () => [false])));
                        const $v_data = [true, $p_data];
                        const $p_end = pl.cc($['end'], ($) => map_AsynchronousInterface($, tempoptional /*3*/($v_glossary__parameters, ($) => [true, $], () => [false]), //$v_glossary__parameters
                        tempoptional /*3*/($v_imports, ($) => [true, $], () => [false]), //$v_imports
                        tempoptional /*3*/($v_type__parameters, ($) => [true, $], () => [false])));
                        const $v_end = [true, $p_end];
                        return {
                            'data': $p_data,
                            'end': $p_end,
                        };
                    })]);
                default: return pl.au($[0]);
            }
        });
    }
    function map_AsynchronousInterfaceReference($, $v_glossary__parameters, $v_imports, $v_type__parameters) {
        return pl.cc($, ($) => {
            const $p_context = pl.cc($['context'], ($) => pl.cc($, ($) => {
                switch ($[0]) {
                    case 'import': return pl.ss($, ($) => ['import', pl.cc($, ($) => {
                            const $p_glossary = pl.cc($['glossary'], ($) => map_Glossary__Reference($, tempoptional /*3*/($v_glossary__parameters, ($) => [true, $], () => [false]), //$v_glossary__parameters
                            tempoptional /*3*/($v_imports, ($) => [true, $], () => [false]), //$v_imports
                            tempoptional /*3*/($v_type__parameters, ($) => [true, $], () => [false])));
                            const $v_glossary = [true, $p_glossary];
                            return {
                                'glossary': $p_glossary,
                            };
                        })]);
                    case 'local': return pl.ss($, ($) => ['local', pl.cc($, ($) => {
                            return null;
                        })]);
                    default: return pl.au($[0]);
                }
            }));
            const $v_context = [true, $p_context];
            const $p_interfaceXX = pl.cc($['interfaceXX'], ($) => $);
            const $v_interfaceXX = [true, $p_interfaceXX];
            const $p_type__arguments = pl.cc($['type arguments'], ($) => map_Arguments($, tempoptional /*3*/($v_glossary__parameters, ($) => [true, $], () => [false]), //$v_glossary__parameters
            tempoptional /*3*/($v_imports, ($) => [true, $], () => [false]), //$v_imports
            tempoptional /*3*/($v_glossary__parameters, ($) => [true, $], () => [false]), //$v_parameters
            tempoptional /*3*/($v_type__parameters, ($) => [true, $], () => [false])));
            const $v_type__arguments = [true, $p_type__arguments];
            return {
                'context': $p_context,
                'interfaceXX': $p_interfaceXX,
                'type arguments': $p_type__arguments,
            };
        });
    }
    function map_DataOrSynchronousInterface($, $v_glossary__parameters, $v_imports, $v_type__parameters) {
        return pl.cc($, ($) => {
            switch ($[0]) {
                case 'data': return pl.ss($, ($) => ['data', map_DataSpecifier($, tempoptional /*3*/($v_glossary__parameters, ($) => [true, $], () => [false]), //$v_glossary__parameters
                    tempoptional /*3*/($v_imports, ($) => [true, $], () => [false]), //$v_imports
                    tempoptional /*3*/($v_type__parameters, ($) => [true, $], () => [false]))]);
                case 'interface': return pl.ss($, ($) => ['interface', map_SynchronousInterfaceReference($, tempoptional /*3*/($v_glossary__parameters, ($) => [true, $], () => [false]), //$v_glossary__parameters
                    tempoptional /*3*/($v_imports, ($) => [true, $], () => [false]), //$v_imports
                    tempoptional /*3*/($v_type__parameters, ($) => [true, $], () => [false]))]);
                default: return pl.au($[0]);
            }
        });
    }
    function map_DataSpecifier($, $v_glossary__parameters, $v_imports, $v_type__parameters) {
        return pl.cc($, ($) => {
            switch ($[0]) {
                case 'glossary parameterXX': return pl.ss($, ($) => ['glossary parameterXX', $]);
                case 'type': return pl.ss($, ($) => ['type', pl.cc($, ($) => {
                        const $p_context = pl.cc($['context'], ($) => pl.cc($, ($) => {
                            switch ($[0]) {
                                case 'import': return pl.ss($, ($) => ['import', pl.cc($, ($) => {
                                        const $p_glossary = pl.cc($['glossary'], ($) => map_Glossary__Reference($, tempoptional /*3*/($v_glossary__parameters, ($) => [true, $], () => [false]), //$v_glossary__parameters
                                        tempoptional /*3*/($v_imports, ($) => [true, $], () => [false]), //$v_imports
                                        tempoptional /*3*/($v_type__parameters, ($) => [true, $], () => [false])));
                                        const $v_glossary = [true, $p_glossary];
                                        return {
                                            'glossary': $p_glossary,
                                        };
                                    })]);
                                case 'local': return pl.ss($, ($) => ['local', pl.cc($, ($) => {
                                        return null;
                                    })]);
                                default: return pl.au($[0]);
                            }
                        }));
                        const $v_context = [true, $p_context];
                        const $p_typeXX = pl.cc($['typeXX'], ($) => $);
                        const $v_typeXX = [true, $p_typeXX];
                        const $p_tailXX = pl.cc($['tailXX'], ($) => $.map(($) => $));
                        const $v_tailXX = [true, $p_tailXX];
                        const $p_type__arguments = pl.cc($['type arguments'], ($) => map_Arguments($, tempoptional /*3*/($v_glossary__parameters, ($) => [true, $], () => [false]), //$v_glossary__parameters
                        tempoptional /*3*/($v_imports, ($) => [true, $], () => [false]), //$v_imports
                        tempoptional /*3*/($v_glossary__parameters, ($) => [true, $], () => [false]), //$v_parameters
                        tempoptional /*3*/($v_type__parameters, ($) => [true, $], () => [false])));
                        const $v_type__arguments = [true, $p_type__arguments];
                        return {
                            'context': $p_context,
                            'tailXX': $p_tailXX,
                            'type arguments': $p_type__arguments,
                            'typeXX': $p_typeXX,
                        };
                    })]);
                case 'type parameterXX': return pl.ss($, ($) => ['type parameterXX', $]);
                default: return pl.au($[0]);
            }
        });
    }
    function map_Dummy($) {
        return pl.cc($, ($) => {
            return null;
        });
    }
    function map_Glossary($, $v_glossaries) {
        return pl.cc($, ($) => {
            const $p_imports = pl.cc($['imports'], ($) => map_Imports($, $v_glossaries));
            const $v_imports = [true, $p_imports];
            const $p_glossary__parameters = pl.cc($['glossary parameters'], ($) => map_Parameters($));
            const $v_glossary__parameters = [true, $p_glossary__parameters];
            const $p_root = pl.cc($['root'], ($) => map_Namespace($, tempoptional /*3*/($v_glossary__parameters, ($) => [true, $], () => [false]), //$v_glossary__parameters
            tempoptional /*3*/($v_imports, ($) => [true, $], () => [false])));
            const $v_root = [true, $p_root];
            const $p_synchronous = pl.cc($['synchronous'], ($) => pl.cc($, ($) => {
                const $p_interfaces = pl.cc($['interfaces'], ($) => $d.resolveDictionary($, { 'map': ($, $l) => pl.cc($.value, ($) => pl.cc($, ($) => {
                        const $p_parameters = pl.cc($['parameters'], ($) => map_Parameters($));
                        const $v_parameters = [true, $p_parameters];
                        const $p__linterface = pl.cc($['interface'], ($) => map_Synchronous__Interface($, tempoptional /*3*/($v_glossary__parameters, ($) => [true, $], () => [false]), //$v_glossary__parameters
                        tempoptional /*3*/($v_imports, ($) => [true, $], () => [false]), //$v_imports
                        tempoptional /*3*/($v_parameters, ($) => [true, $], () => [false])));
                        const $v__linterface = [true, $p__linterface];
                        return {
                            'interface': $p__linterface,
                            'parameters': $p_parameters,
                        };
                    })) }));
                const $v_interfaces = [true, $p_interfaces];
                const $p_algorithms = pl.cc($['algorithms'], ($) => $d.resolveDictionary($, { 'map': ($, $l) => pl.cc($.value, ($) => pl.cc($, ($) => {
                        const $p_parameters = pl.cc($['parameters'], ($) => map_Parameters($));
                        const $v_parameters = [true, $p_parameters];
                        const $p__ltype = pl.cc($['type'], ($) => pl.cc($, ($) => {
                            switch ($[0]) {
                                case 'function': return pl.ss($, ($) => ['function', pl.cc($, ($) => {
                                        const $p__lin = pl.cc($['in'], ($) => map_DataOrSynchronousInterface($, tempoptional /*3*/($v_glossary__parameters, ($) => [true, $], () => [false]), //$v_glossary__parameters
                                        tempoptional /*3*/($v_imports, ($) => [true, $], () => [false]), //$v_imports
                                        tempoptional /*3*/($v_parameters, ($) => [true, $], () => [false])));
                                        const $v__lin = [true, $p__lin];
                                        const $p_out = pl.cc($['out'], ($) => map_DataSpecifier($, tempoptional /*3*/($v_glossary__parameters, ($) => [true, $], () => [false]), //$v_glossary__parameters
                                        tempoptional /*3*/($v_imports, ($) => [true, $], () => [false]), //$v_imports
                                        tempoptional /*3*/($v_parameters, ($) => [true, $], () => [false])));
                                        const $v_out = [true, $p_out];
                                        const $p_callbacks = pl.cc($['callbacks'], ($) => $d.resolveDictionary($, { 'map': ($, $l) => pl.cc($.value, ($) => pl.cc($, ($) => {
                                                const $p__lin = pl.cc($['in'], ($) => map_DataSpecifier($, tempoptional /*3*/($v_glossary__parameters, ($) => [true, $], () => [false]), //$v_glossary__parameters
                                                tempoptional /*3*/($v_imports, ($) => [true, $], () => [false]), //$v_imports
                                                tempoptional /*3*/($v_parameters, ($) => [true, $], () => [false])));
                                                const $v__lin = [true, $p__lin];
                                                const $p_lookups = pl.cc($['lookups'], ($) => $d.resolveDictionary($, { 'map': ($, $l) => pl.cc($.value, ($) => map_DataSpecifier($, tempoptional /*3*/($v_glossary__parameters, ($) => [true, $], () => [false]), //$v_glossary__parameters
                                                    tempoptional /*3*/($v_imports, ($) => [true, $], () => [false]), //$v_imports
                                                    tempoptional /*3*/($v_parameters, ($) => [true, $], () => [false]))) }));
                                                const $v_lookups = [true, $p_lookups];
                                                const $p_out = pl.cc($['out'], ($) => map_DataSpecifier($, tempoptional /*3*/($v_glossary__parameters, ($) => [true, $], () => [false]), //$v_glossary__parameters
                                                tempoptional /*3*/($v_imports, ($) => [true, $], () => [false]), //$v_imports
                                                tempoptional /*3*/($v_parameters, ($) => [true, $], () => [false])));
                                                const $v_out = [true, $p_out];
                                                return {
                                                    'in': $p__lin,
                                                    'lookups': $p_lookups,
                                                    'out': $p_out,
                                                };
                                            })) }));
                                        const $v_callbacks = [true, $p_callbacks];
                                        return {
                                            'callbacks': $p_callbacks,
                                            'in': $p__lin,
                                            'out': $p_out,
                                        };
                                    })]);
                                case 'procedure': return pl.ss($, ($) => ['procedure', pl.cc($, ($) => {
                                        const $p__lin = pl.cc($['in'], ($) => map_DataOrSynchronousInterface($, tempoptional /*3*/($v_glossary__parameters, ($) => [true, $], () => [false]), //$v_glossary__parameters
                                        tempoptional /*3*/($v_imports, ($) => [true, $], () => [false]), //$v_imports
                                        tempoptional /*3*/($v_parameters, ($) => [true, $], () => [false])));
                                        const $v__lin = [true, $p__lin];
                                        const $p_out = pl.cc($['out'], ($) => map_SynchronousInterfaceReference($, tempoptional /*3*/($v_glossary__parameters, ($) => [true, $], () => [false]), //$v_glossary__parameters
                                        tempoptional /*3*/($v_imports, ($) => [true, $], () => [false]), //$v_imports
                                        tempoptional /*3*/($v_parameters, ($) => [true, $], () => [false])));
                                        const $v_out = [true, $p_out];
                                        return {
                                            'in': $p__lin,
                                            'out': $p_out,
                                        };
                                    })]);
                                default: return pl.au($[0]);
                            }
                        }));
                        const $v__ltype = [true, $p__ltype];
                        return {
                            'parameters': $p_parameters,
                            'type': $p__ltype,
                        };
                    })) }));
                const $v_algorithms = [true, $p_algorithms];
                return {
                    'algorithms': $p_algorithms,
                    'interfaces': $p_interfaces,
                };
            }));
            const $v_synchronous = [true, $p_synchronous];
            const $p_asynchronous = pl.cc($['asynchronous'], ($) => pl.cc($, ($) => {
                const $p_interfaces = pl.cc($['interfaces'], ($) => $d.resolveDictionary($, { 'map': ($, $l) => pl.cc($.value, ($) => pl.cc($, ($) => {
                        const $p_parameters = pl.cc($['parameters'], ($) => map_Parameters($));
                        const $v_parameters = [true, $p_parameters];
                        const $p__linterface = pl.cc($['interface'], ($) => map_AsynchronousInterface($, tempoptional /*3*/($v_glossary__parameters, ($) => [true, $], () => [false]), //$v_glossary__parameters
                        tempoptional /*3*/($v_imports, ($) => [true, $], () => [false]), //$v_imports
                        tempoptional /*3*/($v_parameters, ($) => [true, $], () => [false])));
                        const $v__linterface = [true, $p__linterface];
                        return {
                            'interface': $p__linterface,
                            'parameters': $p_parameters,
                        };
                    })) }));
                const $v_interfaces = [true, $p_interfaces];
                const $p_algorithms = pl.cc($['algorithms'], ($) => $d.resolveDictionary($, { 'map': ($, $l) => pl.cc($.value, ($) => pl.cc($, ($) => {
                        const $p_parameters = pl.cc($['parameters'], ($) => map_Parameters($));
                        const $v_parameters = [true, $p_parameters];
                        const $p__ltype = pl.cc($['type'], ($) => pl.cc($, ($) => {
                            switch ($[0]) {
                                case 'constructor': return pl.ss($, ($) => ['constructor', pl.cc($, ($) => {
                                        const $p__linterface = pl.cc($['interface'], ($) => map_AsynchronousInterfaceReference($, tempoptional /*3*/($v_glossary__parameters, ($) => [true, $], () => [false]), //$v_glossary__parameters
                                        tempoptional /*3*/($v_imports, ($) => [true, $], () => [false]), //$v_imports
                                        tempoptional /*3*/($v_parameters, ($) => [true, $], () => [false])));
                                        const $v__linterface = [true, $p__linterface];
                                        const $p_downstreams = pl.cc($['downstreams'], ($) => $d.resolveDictionary($, { 'map': ($, $l) => pl.cc($.value, ($) => map_AsynchronousInterfaceReference($, tempoptional /*3*/($v_glossary__parameters, ($) => [true, $], () => [false]), //$v_glossary__parameters
                                            tempoptional /*3*/($v_imports, ($) => [true, $], () => [false]), //$v_imports
                                            tempoptional /*3*/($v_parameters, ($) => [true, $], () => [false]))) }));
                                        const $v_downstreams = [true, $p_downstreams];
                                        return {
                                            'downstreams': $p_downstreams,
                                            'interface': $p__linterface,
                                        };
                                    })]);
                                case 'function': return pl.ss($, ($) => ['function', pl.cc($, ($) => {
                                        const $p_out = pl.cc($['out'], ($) => map_DataSpecifier($, tempoptional /*3*/($v_glossary__parameters, ($) => [true, $], () => [false]), //$v_glossary__parameters
                                        tempoptional /*3*/($v_imports, ($) => [true, $], () => [false]), //$v_imports
                                        tempoptional /*3*/($v_parameters, ($) => [true, $], () => [false])));
                                        const $v_out = [true, $p_out];
                                        const $p__lin = pl.cc($['in'], ($) => map_DataSpecifier($, tempoptional /*3*/($v_glossary__parameters, ($) => [true, $], () => [false]), //$v_glossary__parameters
                                        tempoptional /*3*/($v_imports, ($) => [true, $], () => [false]), //$v_imports
                                        tempoptional /*3*/($v_parameters, ($) => [true, $], () => [false])));
                                        const $v__lin = [true, $p__lin];
                                        return {
                                            'in': $p__lin,
                                            'out': $p_out,
                                        };
                                    })]);
                                case 'resource': return pl.ss($, ($) => ['resource', pl.cc($, ($) => {
                                        const $p_consumer = pl.cc($['consumer'], ($) => map_AsynchronousInterfaceReference($, tempoptional /*3*/($v_glossary__parameters, ($) => [true, $], () => [false]), //$v_glossary__parameters
                                        tempoptional /*3*/($v_imports, ($) => [true, $], () => [false]), //$v_imports
                                        tempoptional /*3*/($v_parameters, ($) => [true, $], () => [false])));
                                        const $v_consumer = [true, $p_consumer];
                                        const $p_request = pl.cc($['request'], ($) => map_DataSpecifier($, tempoptional /*3*/($v_glossary__parameters, ($) => [true, $], () => [false]), //$v_glossary__parameters
                                        tempoptional /*3*/($v_imports, ($) => [true, $], () => [false]), //$v_imports
                                        tempoptional /*3*/($v_parameters, ($) => [true, $], () => [false])));
                                        const $v_request = [true, $p_request];
                                        return {
                                            'consumer': $p_consumer,
                                            'request': $p_request,
                                        };
                                    })]);
                                default: return pl.au($[0]);
                            }
                        }));
                        const $v__ltype = [true, $p__ltype];
                        return {
                            'parameters': $p_parameters,
                            'type': $p__ltype,
                        };
                    })) }));
                const $v_algorithms = [true, $p_algorithms];
                return {
                    'algorithms': $p_algorithms,
                    'interfaces': $p_interfaces,
                };
            }));
            const $v_asynchronous = [true, $p_asynchronous];
            return {
                'asynchronous': $p_asynchronous,
                'glossary parameters': $p_glossary__parameters,
                'imports': $p_imports,
                'root': $p_root,
                'synchronous': $p_synchronous,
            };
        });
    }
    function map_Glossary__Reference($, $v_glossary__parameters, $v_imports, $v_type__parameters) {
        return pl.cc($, ($) => {
            const $p_glossary = pl.cc($['glossary'], ($) => pl.cc($, ($) => {
                const refkey = $.key;
                const constraint = tempoptional /*3*/($v_imports, ($) => $.__getEntry(refkey, ($) => [true, $], () => {
                    $se.error("no such entry");
                    return [false];
                }), () => [false]);
                return {
                    'annotation': $.annotation,
                    'constraint': constraint,
                    'key': $.key,
                };
            }));
            const $v_glossary = [true, $p_glossary];
            const $p_glossary__arguments = pl.cc($['glossary arguments'], ($) => map_Arguments($, tempoptional /*3*/($v_glossary__parameters, ($) => [true, $], () => [false]), //$v_glossary__parameters
            tempoptional /*3*/($v_imports, ($) => [true, $], () => [false]), //$v_imports
            tempoptional /*3*/($v_glossary__parameters, ($) => [true, $], () => [false]), //$v_parameters
            tempoptional /*3*/($v_type__parameters, ($) => [true, $], () => [false])));
            const $v_glossary__arguments = [true, $p_glossary__arguments];
            return {
                'glossary': $p_glossary,
                'glossary arguments': $p_glossary__arguments,
            };
        });
    }
    function map_Imports($, $v_glossaries) {
        return $d.resolveDictionary($, { 'map': ($, $l) => pl.cc($.value, ($) => pl.cc($, ($) => {
                return null;
            })) });
    }
    function map_Namespace($, $v_glossary__parameters, $v_imports) {
        return pl.cc($, ($) => {
            const $p_namespaces = pl.cc($['namespaces'], ($) => $d.resolveDictionary($, { 'map': ($, $l) => pl.cc($.value, ($) => map_Namespace($, tempoptional /*3*/($v_glossary__parameters, ($) => [true, $], () => [false]), //$v_glossary__parameters
                tempoptional /*3*/($v_imports, ($) => [true, $], () => [false]))) }));
            const $v_namespaces = [true, $p_namespaces];
            const $p_types = pl.cc($['types'], ($) => $d.resolveDictionary($, { 'map': ($, $l) => pl.cc($.value, ($) => pl.cc($, ($) => {
                    const $p_parameters = pl.cc($['parameters'], ($) => map_Parameters($));
                    const $v_parameters = [true, $p_parameters];
                    const $p__ltype = pl.cc($['type'], ($) => map_Type($, tempoptional /*3*/($v_glossary__parameters, ($) => [true, $], () => [false]), //$v_glossary__parameters
                    tempoptional /*3*/($v_imports, ($) => [true, $], () => [false]), //$v_imports
                    tempoptional /*3*/($v_parameters, ($) => [true, $], () => [false])));
                    const $v__ltype = [true, $p__ltype];
                    return {
                        'parameters': $p_parameters,
                        'type': $p__ltype,
                    };
                })) }));
            const $v_types = [true, $p_types];
            return {
                'namespaces': $p_namespaces,
                'types': $p_types,
            };
        });
    }
    function map_Parameters($) {
        return $d.resolveDictionary($, { 'map': ($, $l) => pl.cc($.value, ($) => pl.cc($, ($) => {
                return null;
            })) });
    }
    function map_Synchronous__Interface($, $v_glossary__parameters, $v_imports, $v_type__parameters) {
        return pl.cc($, ($) => {
            switch ($[0]) {
                case 'group': return pl.ss($, ($) => ['group', pl.cc($, ($) => {
                        const $p_members = pl.cc($['members'], ($) => $d.resolveDictionary($, { 'map': ($, $l) => pl.cc($.value, ($) => map_Synchronous__Interface($, tempoptional /*3*/($v_glossary__parameters, ($) => [true, $], () => [false]), //$v_glossary__parameters
                            tempoptional /*3*/($v_imports, ($) => [true, $], () => [false]), //$v_imports
                            tempoptional /*3*/($v_type__parameters, ($) => [true, $], () => [false]))) }));
                        const $v_members = [true, $p_members];
                        return {
                            'members': $p_members,
                        };
                    })]);
                case 'method': return pl.ss($, ($) => ['method', pl.cc($, ($) => {
                        const $p_data = pl.cc($['data'], ($) => tempoptional /*4*/($, ($) => [true, map_DataSpecifier($, tempoptional /*3*/($v_glossary__parameters, ($) => [true, $], () => [false]), //$v_glossary__parameters
                            tempoptional /*3*/($v_imports, ($) => [true, $], () => [false]), //$v_imports
                            tempoptional /*3*/($v_type__parameters, ($) => [true, $], () => [false]))], () => [false]));
                        const $v_data = [true, $p_data];
                        const $p__linterface = pl.cc($['interface'], ($) => tempoptional /*4*/($, ($) => [true, map_Synchronous__Interface($, tempoptional /*3*/($v_glossary__parameters, ($) => [true, $], () => [false]), //$v_glossary__parameters
                            tempoptional /*3*/($v_imports, ($) => [true, $], () => [false]), //$v_imports
                            tempoptional /*3*/($v_type__parameters, ($) => [true, $], () => [false]))], () => [false]));
                        const $v__linterface = [true, $p__linterface];
                        return {
                            'data': $p_data,
                            'interface': $p__linterface,
                        };
                    })]);
                case 'reference': return pl.ss($, ($) => ['reference', map_SynchronousInterfaceReference($, tempoptional /*3*/($v_glossary__parameters, ($) => [true, $], () => [false]), //$v_glossary__parameters
                    tempoptional /*3*/($v_imports, ($) => [true, $], () => [false]), //$v_imports
                    tempoptional /*3*/($v_type__parameters, ($) => [true, $], () => [false]))]);
                default: return pl.au($[0]);
            }
        });
    }
    function map_SynchronousInterfaceReference($, $v_glossary__parameters, $v_imports, $v_type__parameters) {
        return pl.cc($, ($) => {
            const $p_context = pl.cc($['context'], ($) => pl.cc($, ($) => {
                switch ($[0]) {
                    case 'import': return pl.ss($, ($) => ['import', pl.cc($, ($) => {
                            const $p_glossary = pl.cc($['glossary'], ($) => map_Glossary__Reference($, tempoptional /*3*/($v_glossary__parameters, ($) => [true, $], () => [false]), //$v_glossary__parameters
                            tempoptional /*3*/($v_imports, ($) => [true, $], () => [false]), //$v_imports
                            tempoptional /*3*/($v_type__parameters, ($) => [true, $], () => [false])));
                            const $v_glossary = [true, $p_glossary];
                            const $p_interfaceXX = pl.cc($['interfaceXX'], ($) => $);
                            const $v_interfaceXX = [true, $p_interfaceXX];
                            return {
                                'glossary': $p_glossary,
                                'interfaceXX': $p_interfaceXX,
                            };
                        })]);
                    case 'local': return pl.ss($, ($) => ['local', pl.cc($, ($) => {
                            const $p_interfaceXX = pl.cc($['interfaceXX'], ($) => $);
                            const $v_interfaceXX = [true, $p_interfaceXX];
                            return {
                                'interfaceXX': $p_interfaceXX,
                            };
                        })]);
                    default: return pl.au($[0]);
                }
            }));
            const $v_context = [true, $p_context];
            const $p_type__arguments = pl.cc($['type arguments'], ($) => map_Arguments($, tempoptional /*3*/($v_glossary__parameters, ($) => [true, $], () => [false]), //$v_glossary__parameters
            tempoptional /*3*/($v_imports, ($) => [true, $], () => [false]), //$v_imports
            tempoptional /*3*/($v_glossary__parameters, ($) => [true, $], () => [false]), //$v_parameters
            tempoptional /*3*/($v_type__parameters, ($) => [true, $], () => [false])));
            const $v_type__arguments = [true, $p_type__arguments];
            return {
                'context': $p_context,
                'type arguments': $p_type__arguments,
            };
        });
    }
    function map_Type($, $v_glossary__parameters, $v_imports, $v_type__parameters) {
        return pl.cc($, ($) => {
            switch ($[0]) {
                case 'array': return pl.ss($, ($) => ['array', map_Type($, tempoptional /*3*/($v_glossary__parameters, ($) => [true, $], () => [false]), //$v_glossary__parameters
                    tempoptional /*3*/($v_imports, ($) => [true, $], () => [false]), //$v_imports
                    tempoptional /*3*/($v_type__parameters, ($) => [true, $], () => [false]))]);
                case 'boolean': return pl.ss($, ($) => ['boolean', pl.cc($, ($) => {
                        return null;
                    })]);
                case 'computed': return pl.ss($, ($) => ['computed', map_Type($, tempoptional /*3*/($v_glossary__parameters, ($) => [true, $], () => [false]), //$v_glossary__parameters
                    tempoptional /*3*/($v_imports, ($) => [true, $], () => [false]), //$v_imports
                    tempoptional /*3*/($v_type__parameters, ($) => [true, $], () => [false]))]);
                case 'dictionary': return pl.ss($, ($) => ['dictionary', map_Type($, tempoptional /*3*/($v_glossary__parameters, ($) => [true, $], () => [false]), //$v_glossary__parameters
                    tempoptional /*3*/($v_imports, ($) => [true, $], () => [false]), //$v_imports
                    tempoptional /*3*/($v_type__parameters, ($) => [true, $], () => [false]))]);
                case 'group': return pl.ss($, ($) => ['group', $d.resolveDictionary($, { 'map': ($, $l) => pl.cc($.value, ($) => pl.cc($, ($) => {
                            const $p__ltype = pl.cc($['type'], ($) => map_Type($, tempoptional /*3*/($v_glossary__parameters, ($) => [true, $], () => [false]), //$v_glossary__parameters
                            tempoptional /*3*/($v_imports, ($) => [true, $], () => [false]), //$v_imports
                            tempoptional /*3*/($v_type__parameters, ($) => [true, $], () => [false])));
                            const $v__ltype = [true, $p__ltype];
                            return {
                                'type': $p__ltype,
                            };
                        })) })]);
                case 'null': return pl.ss($, ($) => ['null', pl.cc($, ($) => {
                        return null;
                    })]);
                case 'number': return pl.ss($, ($) => ['number', pl.cc($, ($) => {
                        return null;
                    })]);
                case 'optional': return pl.ss($, ($) => ['optional', map_Type($, tempoptional /*3*/($v_glossary__parameters, ($) => [true, $], () => [false]), //$v_glossary__parameters
                    tempoptional /*3*/($v_imports, ($) => [true, $], () => [false]), //$v_imports
                    tempoptional /*3*/($v_type__parameters, ($) => [true, $], () => [false]))]);
                case 'reference': return pl.ss($, ($) => ['reference', map_DataSpecifier($, tempoptional /*3*/($v_glossary__parameters, ($) => [true, $], () => [false]), //$v_glossary__parameters
                    tempoptional /*3*/($v_imports, ($) => [true, $], () => [false]), //$v_imports
                    tempoptional /*3*/($v_type__parameters, ($) => [true, $], () => [false]))]);
                case 'string': return pl.ss($, ($) => ['string', pl.cc($, ($) => {
                        return null;
                    })]);
                case 'taggedUnion': return pl.ss($, ($) => ['taggedUnion', $d.resolveDictionary($, { 'map': ($, $l) => pl.cc($.value, ($) => map_Type($, tempoptional /*3*/($v_glossary__parameters, ($) => [true, $], () => [false]), //$v_glossary__parameters
                        tempoptional /*3*/($v_imports, ($) => [true, $], () => [false]), //$v_imports
                        tempoptional /*3*/($v_type__parameters, ($) => [true, $], () => [false]))) })]);
                default: return pl.au($[0]);
            }
        });
    }
    return map_Dummy;
};
exports.$$ = $$;
