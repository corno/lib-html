import * as pd from 'pareto-core-data';
import * as t from "./glossary";
type RawDictionary<T> = {
    [key: string]: T;
};
export declare function ns(namespaces: RawDictionary<t.T.Namespace<pd.SourceLocation>>, typeParameters: RawDictionary<t.T.Type__Parameters.D<pd.SourceLocation>>, types: RawDictionary<t.T.Type<pd.SourceLocation>>): t.T.Namespace<pd.SourceLocation>;
export declare function funcDecl(typeParameters: RawDictionary<t.T.Type__Parameters.D<pd.SourceLocation>>, context: t.T.Type<pd.SourceLocation>, parameters: RawDictionary<t.T.Function__Declaration.parameters.D<pd.SourceLocation>>): t.T.Function__Declaration<pd.SourceLocation>;
export declare function valueFunction(declaration: t.T.Function__Declaration<pd.SourceLocation>, returnType: t.T.Type<pd.SourceLocation>): t.T.Type<pd.SourceLocation>;
export declare function addressFunction(declaration: t.T.Function__Declaration<pd.SourceLocation>, returnType: t.T.Type<pd.SourceLocation>): t.T.Type<pd.SourceLocation>;
export declare function procedure(declaration: t.T.Function__Declaration<pd.SourceLocation>, returnType: t.T.Type<pd.SourceLocation>): t.T.Type<pd.SourceLocation>;
export declare function null_(): t.T.Type<pd.SourceLocation>;
export declare function string(): t.T.Type<pd.SourceLocation>;
export declare function number(): t.T.Type<pd.SourceLocation>;
export declare function boolean(): t.T.Type<pd.SourceLocation>;
export declare function group(properties: RawDictionary<t.T.Type.group.D<pd.SourceLocation>>): t.T.Type<pd.SourceLocation>;
export declare function array(type: t.T.Type<pd.SourceLocation>): t.T.Type<pd.SourceLocation>;
export declare function optional(type: t.T.Type<pd.SourceLocation>): t.T.Type<pd.SourceLocation>;
export declare function dictionary(type: t.T.Type<pd.SourceLocation>): t.T.Type<pd.SourceLocation>;
export {};
