"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dictionary = exports.optional = exports.array = exports.group = exports.boolean = exports.number = exports.string = exports.null_ = exports.procedure = exports.addressFunction = exports.valueFunction = exports.funcDecl = exports.ns = void 0;
const pd = __importStar(require("pareto-core-data"));
function ns(namespaces, typeParameters, types) {
    return {
        'namespaces': pd.d(namespaces),
        'parameters': pd.d(typeParameters),
        'types': pd.d(types),
    };
}
exports.ns = ns;
function funcDecl(typeParameters, context, parameters) {
    return {
        'type parameters': pd.d(typeParameters),
        'context': context,
        'parameters': pd.d(parameters),
    };
}
exports.funcDecl = funcDecl;
function valueFunction(declaration, returnType) {
    return ['value function', {
            'declaration': declaration,
            'return type': returnType,
        }];
}
exports.valueFunction = valueFunction;
function addressFunction(declaration, returnType) {
    return ['address function', {
            'declaration': declaration,
            'return type': returnType,
        }];
}
exports.addressFunction = addressFunction;
function procedure(declaration, returnType) {
    return ['procedure', {
            'declaration': declaration,
        }];
}
exports.procedure = procedure;
function null_() {
    return ['null', null];
}
exports.null_ = null_;
function string() {
    return ['string', null];
}
exports.string = string;
function number() {
    return ['number', null];
}
exports.number = number;
function boolean() {
    return ['boolean', null];
}
exports.boolean = boolean;
function group(properties) {
    return ['group', pd.d(properties)];
}
exports.group = group;
function array(type) {
    return ['array', type];
}
exports.array = array;
function optional(type) {
    return ['optional', type];
}
exports.optional = optional;
function dictionary(type) {
    return ['dictionary', type];
}
exports.dictionary = dictionary;
