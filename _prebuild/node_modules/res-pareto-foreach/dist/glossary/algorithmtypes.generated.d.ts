import { T } from "./datatypes.generated";
export declare namespace ASYNC {
    namespace I { }
    namespace A { }
}
export declare namespace SYNC {
    namespace I {
        type OnElement<TType> = ($: TType) => void;
        type OnEnrichedArray<TType> = {
            readonly 'onEmpty': () => void;
            readonly 'onNotEmpty': ($c: ($b: ($: T.AnnotatedElement<TType>) => void) => void) => void;
        };
        type OnEnrichedDictionary<TType> = {
            readonly 'onEmpty': () => void;
            readonly 'onNotEmpty': ($c: ($b: ($: T.AnnotatedEntry<TType>) => void) => void) => void;
        };
        type OnEntry<TType> = ($: T.KeyValuePair<TType>) => void;
    }
    namespace A {
        namespace P {
            type ArrayForEach = <TType>($: T.Array<TType>, $i: SYNC.I.OnElement<TType>) => void;
        }
        namespace F {
            type DecorateDictionaryEntriesWithKey = <TType>($: T.Dictionary<TType>) => T.KeyValueDictionary<TType>;
        }
        namespace P {
            type DictionaryForEach = <TType>($: T.Dictionary<TType>, $i: SYNC.I.OnEntry<TType>) => void;
        }
        namespace P {
            type EnrichedArrayForEach = <TType>($: T.Array<TType>, $i: SYNC.I.OnEnrichedArray<TType>) => void;
        }
        namespace P {
            type EnrichedDictionaryForEach = <TType>($: T.Dictionary<TType>, $i: SYNC.I.OnEnrichedDictionary<TType>) => void;
        }
    }
}
