import * as pt from 'pareto-core-types';
export declare namespace N { }
export declare namespace T {
    namespace AnnotatedElement {
        type isFirst<TType> = boolean;
        type isLast<TType> = boolean;
        type value<TType> = TType;
    }
    type AnnotatedElement<TType> = {
        readonly 'isFirst': boolean;
        readonly 'isLast': boolean;
        readonly 'value': TType;
    };
    namespace AnnotatedEntry {
        type isFirst<TType> = boolean;
        type isLast<TType> = boolean;
        type key<TType> = string;
        type value<TType> = TType;
    }
    type AnnotatedEntry<TType> = {
        readonly 'isFirst': boolean;
        readonly 'isLast': boolean;
        readonly 'key': string;
        readonly 'value': TType;
    };
    namespace Array {
        type A<TType> = TType;
    }
    type Array<TType> = pt.Array<TType>;
    namespace Dictionary {
        type D<TType> = TType;
    }
    type Dictionary<TType> = pt.Dictionary<TType>;
    namespace KeyValueDictionary {
        type D<TType> = T.KeyValuePair<TType>;
    }
    type KeyValueDictionary<TType> = pt.Dictionary<T.KeyValuePair<TType>>;
    namespace KeyValuePair {
        type key<TType> = string;
        type value<TType> = TType;
    }
    type KeyValuePair<TType> = {
        readonly 'key': string;
        readonly 'value': TType;
    };
}
