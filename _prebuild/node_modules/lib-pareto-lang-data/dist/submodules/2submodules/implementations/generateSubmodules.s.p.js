"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$$ = void 0;
const pm = __importStar(require("pareto-core-map"));
const $$ = ($d) => {
    return ($) => {
        function foo(name, settings) {
            const glossary = $d.map2Glossary({
                'library': $.data.library,
                'atom mappings': $.data['atom mappings'],
                // 'atom mappings': pm.wrapRawDictionary({
                //     "text": ['string', null],
                //     "identifier": ['string', null],
                // }),
                'mapping settings': settings
            });
            $d.createFile(($i) => {
                $i($d.merge(pm.wrapRawArray([$.path, pm.wrapRawArray([name, "glossary.generated.ts"])])), ($i) => {
                    $d.serializeGlossary(glossary, $i);
                });
            }, {
                'logError': () => {
                }
            });
        }
        foo("unresolved", {
            'constraints mapping': {
                'constraints': [false],
                'terminal values': true,
            },
            'create annotations': true,
        });
        foo("resolved", {
            'constraints mapping': {
                'constraints': [true, ['required', null]],
                'terminal values': true,
            },
            'create annotations': false,
        });
        foo("possiblyresolved", {
            'constraints mapping': {
                'constraints': [true, ['optional', null]],
                'terminal values': true,
            },
            'create annotations': false,
        });
    };
};
exports.$$ = $$;
