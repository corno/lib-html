import * as pt from 'pareto-core-types';
export declare namespace N {
    namespace Atom {
        namespace N {
            namespace G {
                namespace N {
                    namespace _$ltype {
                        namespace N { }
                        namespace T { }
                    }
                }
                namespace T { }
            }
        }
        namespace T { }
    }
    namespace Atom_$_$Types {
        namespace N {
            namespace D {
                namespace N {
                    namespace G {
                        namespace N { }
                        namespace T { }
                    }
                }
                namespace T { }
            }
        }
        namespace T { }
    }
    namespace Dictionary_$_$Selection {
        namespace N {
            namespace G {
                namespace N {
                    namespace dictionary {
                        namespace N { }
                        namespace T { }
                    }
                    namespace _$ltype {
                        namespace N { }
                        namespace T { }
                    }
                }
                namespace T { }
            }
        }
        namespace T { }
    }
    namespace Global_$_$Type {
        namespace N {
            namespace G {
                namespace N {
                    namespace _$ltype {
                        namespace N { }
                        namespace T { }
                    }
                }
                namespace T { }
            }
        }
        namespace T { }
    }
    namespace Global_$_$Type_$_$Selection {
        namespace N {
            namespace TU {
                namespace N {
                    namespace cyclic_$_$sibling {
                        namespace N {
                            namespace G {
                                namespace N {
                                    namespace _$ltype {
                                        namespace N { }
                                        namespace T { }
                                    }
                                }
                                namespace T { }
                            }
                        }
                        namespace T { }
                    }
                    namespace _$limport {
                        namespace N {
                            namespace G {
                                namespace N {
                                    namespace library {
                                        namespace N { }
                                        namespace T { }
                                    }
                                    namespace _$ltype {
                                        namespace N { }
                                        namespace T { }
                                    }
                                }
                                namespace T { }
                            }
                        }
                        namespace T { }
                    }
                    namespace resolved_$_$sibling {
                        namespace N {
                            namespace G {
                                namespace N {
                                    namespace _$ltype {
                                        namespace N { }
                                        namespace T { }
                                    }
                                }
                                namespace T { }
                            }
                        }
                        namespace T { }
                    }
                }
                namespace T { }
            }
        }
        namespace T { }
    }
    namespace Imports {
        namespace N {
            namespace D {
                namespace N {
                    namespace G {
                        namespace N { }
                        namespace T { }
                    }
                }
                namespace T { }
            }
        }
        namespace T { }
    }
    namespace Model {
        namespace N {
            namespace G {
                namespace N {
                    namespace root {
                        namespace N { }
                        namespace T { }
                    }
                    namespace type_$_$library {
                        namespace N { }
                        namespace T { }
                    }
                }
                namespace T { }
            }
        }
        namespace T { }
    }
    namespace Root {
        namespace N { }
        namespace T { }
    }
    namespace Type {
        namespace N {
            namespace G {
                namespace N {
                    namespace _$ltype {
                        namespace N {
                            namespace TU {
                                namespace N {
                                    namespace array {
                                        namespace N {
                                            namespace G {
                                                namespace N {
                                                    namespace _$ltype {
                                                        namespace N { }
                                                        namespace T { }
                                                    }
                                                }
                                                namespace T { }
                                            }
                                        }
                                        namespace T { }
                                    }
                                    namespace atom {
                                        namespace N {
                                            namespace G {
                                                namespace N {
                                                    namespace atom {
                                                        namespace N { }
                                                        namespace T { }
                                                    }
                                                }
                                                namespace T { }
                                            }
                                        }
                                        namespace T { }
                                    }
                                    namespace component {
                                        namespace N {
                                            namespace G {
                                                namespace N {
                                                    namespace _$ltype {
                                                        namespace N { }
                                                        namespace T { }
                                                    }
                                                }
                                                namespace T { }
                                            }
                                        }
                                        namespace T { }
                                    }
                                    namespace constraint {
                                        namespace N { }
                                        namespace T { }
                                    }
                                    namespace cyclic_$_$reference {
                                        namespace N {
                                            namespace G {
                                                namespace N {
                                                    namespace atom {
                                                        namespace N { }
                                                        namespace T { }
                                                    }
                                                    namespace sibling {
                                                        namespace N { }
                                                        namespace T { }
                                                    }
                                                }
                                                namespace T { }
                                            }
                                        }
                                        namespace T { }
                                    }
                                    namespace dictionary {
                                        namespace N {
                                            namespace G {
                                                namespace N {
                                                    namespace constraints {
                                                        namespace N {
                                                            namespace D {
                                                                namespace N {
                                                                    namespace TU {
                                                                        namespace N {
                                                                            namespace dictionary {
                                                                                namespace N {
                                                                                    namespace G {
                                                                                        namespace N {
                                                                                            namespace dense {
                                                                                                namespace N {
                                                                                                    namespace TU {
                                                                                                        namespace N {
                                                                                                            namespace no {
                                                                                                                namespace N {
                                                                                                                    namespace G {
                                                                                                                        namespace N { }
                                                                                                                        namespace T { }
                                                                                                                    }
                                                                                                                }
                                                                                                                namespace T { }
                                                                                                            }
                                                                                                            namespace yes {
                                                                                                                namespace N {
                                                                                                                    namespace G {
                                                                                                                        namespace N { }
                                                                                                                        namespace T { }
                                                                                                                    }
                                                                                                                }
                                                                                                                namespace T { }
                                                                                                            }
                                                                                                        }
                                                                                                        namespace T { }
                                                                                                    }
                                                                                                }
                                                                                                namespace T { }
                                                                                            }
                                                                                            namespace dictionary {
                                                                                                namespace N { }
                                                                                                namespace T { }
                                                                                            }
                                                                                        }
                                                                                        namespace T { }
                                                                                    }
                                                                                }
                                                                                namespace T { }
                                                                            }
                                                                            namespace lookup {
                                                                                namespace N { }
                                                                                namespace T { }
                                                                            }
                                                                        }
                                                                        namespace T { }
                                                                    }
                                                                }
                                                                namespace T { }
                                                            }
                                                        }
                                                        namespace T { }
                                                    }
                                                    namespace key {
                                                        namespace N { }
                                                        namespace T { }
                                                    }
                                                    namespace _$ltype {
                                                        namespace N { }
                                                        namespace T { }
                                                    }
                                                }
                                                namespace T { }
                                            }
                                        }
                                        namespace T { }
                                    }
                                    namespace group {
                                        namespace N {
                                            namespace G {
                                                namespace N {
                                                    namespace properties {
                                                        namespace N {
                                                            namespace D {
                                                                namespace N {
                                                                    namespace G {
                                                                        namespace N {
                                                                            namespace _$ltype {
                                                                                namespace N { }
                                                                                namespace T { }
                                                                            }
                                                                        }
                                                                        namespace T { }
                                                                    }
                                                                }
                                                                namespace T { }
                                                            }
                                                        }
                                                        namespace T { }
                                                    }
                                                }
                                                namespace T { }
                                            }
                                        }
                                        namespace T { }
                                    }
                                    namespace nothing {
                                        namespace N {
                                            namespace G {
                                                namespace N { }
                                                namespace T { }
                                            }
                                        }
                                        namespace T { }
                                    }
                                    namespace optional {
                                        namespace N {
                                            namespace G {
                                                namespace N {
                                                    namespace _$ltype {
                                                        namespace N { }
                                                        namespace T { }
                                                    }
                                                }
                                                namespace T { }
                                            }
                                        }
                                        namespace T { }
                                    }
                                    namespace resolved_$_$reference {
                                        namespace N {
                                            namespace G {
                                                namespace N {
                                                    namespace atom {
                                                        namespace N { }
                                                        namespace T { }
                                                    }
                                                    namespace value {
                                                        namespace N {
                                                            namespace TU {
                                                                namespace N {
                                                                    namespace dictionary {
                                                                        namespace N { }
                                                                        namespace T { }
                                                                    }
                                                                    namespace lookup {
                                                                        namespace N { }
                                                                        namespace T { }
                                                                    }
                                                                }
                                                                namespace T { }
                                                            }
                                                        }
                                                        namespace T { }
                                                    }
                                                }
                                                namespace T { }
                                            }
                                        }
                                        namespace T { }
                                    }
                                    namespace state_$_$group {
                                        namespace N {
                                            namespace G {
                                                namespace N {
                                                    namespace states {
                                                        namespace N {
                                                            namespace D {
                                                                namespace N {
                                                                    namespace G {
                                                                        namespace N {
                                                                            namespace _$ltype {
                                                                                namespace N { }
                                                                                namespace T { }
                                                                            }
                                                                        }
                                                                        namespace T { }
                                                                    }
                                                                }
                                                                namespace T { }
                                                            }
                                                        }
                                                        namespace T { }
                                                    }
                                                }
                                                namespace T { }
                                            }
                                        }
                                        namespace T { }
                                    }
                                }
                                namespace T { }
                            }
                        }
                        namespace T { }
                    }
                }
                namespace T { }
            }
        }
        namespace T { }
    }
    namespace Type_$_$Library {
        namespace N {
            namespace G {
                namespace N {
                    namespace atom_$_$types {
                        namespace N { }
                        namespace T { }
                    }
                    namespace global_$_$types {
                        namespace N {
                            namespace D {
                                namespace N { }
                                namespace T { }
                            }
                        }
                        namespace T { }
                    }
                    namespace imports {
                        namespace N { }
                        namespace T { }
                    }
                }
                namespace T { }
            }
        }
        namespace T { }
    }
    namespace Type_$_$Selection {
        namespace N {
            namespace G {
                namespace N {
                    namespace global_$_$type {
                        namespace N { }
                        namespace T { }
                    }
                    namespace _$limport {
                        namespace N {
                            namespace O {
                                namespace N { }
                                namespace T { }
                            }
                        }
                        namespace T { }
                    }
                    namespace tail {
                        namespace N {
                            namespace O {
                                namespace N { }
                                namespace T { }
                            }
                        }
                        namespace T { }
                    }
                }
                namespace T { }
            }
        }
        namespace T { }
    }
    namespace Type_$_$Selection_$_$Tail {
        namespace N {
            namespace G {
                namespace N {
                    namespace step_$_$type {
                        namespace N {
                            namespace TU {
                                namespace N {
                                    namespace array {
                                        namespace N {
                                            namespace G {
                                                namespace N {
                                                    namespace array {
                                                        namespace N { }
                                                        namespace T { }
                                                    }
                                                }
                                                namespace T { }
                                            }
                                        }
                                        namespace T { }
                                    }
                                    namespace dictionary {
                                        namespace N {
                                            namespace G {
                                                namespace N {
                                                    namespace dictionary {
                                                        namespace N { }
                                                        namespace T { }
                                                    }
                                                }
                                                namespace T { }
                                            }
                                        }
                                        namespace T { }
                                    }
                                    namespace group {
                                        namespace N {
                                            namespace G {
                                                namespace N {
                                                    namespace group {
                                                        namespace N { }
                                                        namespace T { }
                                                    }
                                                    namespace property {
                                                        namespace N { }
                                                        namespace T { }
                                                    }
                                                }
                                                namespace T { }
                                            }
                                        }
                                        namespace T { }
                                    }
                                    namespace optional {
                                        namespace N {
                                            namespace G {
                                                namespace N {
                                                    namespace optional {
                                                        namespace N { }
                                                        namespace T { }
                                                    }
                                                }
                                                namespace T { }
                                            }
                                        }
                                        namespace T { }
                                    }
                                    namespace state_$_$group {
                                        namespace N {
                                            namespace G {
                                                namespace N {
                                                    namespace state {
                                                        namespace N { }
                                                        namespace T { }
                                                    }
                                                    namespace state_$_$group {
                                                        namespace N { }
                                                        namespace T { }
                                                    }
                                                }
                                                namespace T { }
                                            }
                                        }
                                        namespace T { }
                                    }
                                }
                                namespace T { }
                            }
                        }
                        namespace T { }
                    }
                    namespace tail {
                        namespace N {
                            namespace O {
                                namespace N { }
                                namespace T { }
                            }
                        }
                        namespace T { }
                    }
                }
                namespace T { }
            }
        }
        namespace T { }
    }
}
export declare namespace T {
    namespace Atom {
        namespace _ltype {
            type annotation<GAnnotation> = GAnnotation;
            type key<GAnnotation> = string;
        }
        type _ltype<GAnnotation> = {
            readonly 'annotation': GAnnotation;
            readonly 'key': string;
        };
    }
    type Atom<GAnnotation> = {
        readonly 'type': {
            readonly 'annotation': GAnnotation;
            readonly 'key': string;
        };
    };
    namespace Atom__Types {
        type annotation<GAnnotation> = GAnnotation;
        namespace dictionary {
            namespace D { }
            type D<GAnnotation> = null;
        }
        type dictionary<GAnnotation> = pt.Dictionary<null>;
    }
    type Atom__Types<GAnnotation> = {
        readonly 'annotation': GAnnotation;
        readonly 'dictionary': pt.Dictionary<null>;
    };
    namespace Dictionary__Selection {
        type dictionary<GAnnotation> = GAnnotation;
        type _ltype<GAnnotation> = T.Type__Selection<GAnnotation>;
    }
    type Dictionary__Selection<GAnnotation> = {
        readonly 'dictionary': GAnnotation;
        readonly 'type': T.Type__Selection<GAnnotation>;
    };
    namespace Global__Type {
        type _ltype<GAnnotation> = T.Type<GAnnotation>;
    }
    type Global__Type<GAnnotation> = {
        readonly 'type': T.Type<GAnnotation>;
    };
    namespace Global__Type__Selection {
        namespace cyclic__sibling {
            namespace _ltype {
                type annotation<GAnnotation> = GAnnotation;
                type key<GAnnotation> = string;
            }
            type _ltype<GAnnotation> = {
                readonly 'annotation': GAnnotation;
                readonly 'key': string;
            };
        }
        type cyclic__sibling<GAnnotation> = {
            readonly 'type': {
                readonly 'annotation': GAnnotation;
                readonly 'key': string;
            };
        };
        namespace _limport {
            namespace library {
                type annotation<GAnnotation> = GAnnotation;
                type key<GAnnotation> = string;
            }
            type library<GAnnotation> = {
                readonly 'annotation': GAnnotation;
                readonly 'key': string;
            };
            namespace _ltype {
                type annotation<GAnnotation> = GAnnotation;
                type key<GAnnotation> = string;
            }
            type _ltype<GAnnotation> = {
                readonly 'annotation': GAnnotation;
                readonly 'key': string;
            };
        }
        type _limport<GAnnotation> = {
            readonly 'library': {
                readonly 'annotation': GAnnotation;
                readonly 'key': string;
            };
            readonly 'type': {
                readonly 'annotation': GAnnotation;
                readonly 'key': string;
            };
        };
        namespace resolved__sibling {
            namespace _ltype {
                type annotation<GAnnotation> = GAnnotation;
                type key<GAnnotation> = string;
            }
            type _ltype<GAnnotation> = {
                readonly 'annotation': GAnnotation;
                readonly 'key': string;
            };
        }
        type resolved__sibling<GAnnotation> = {
            readonly 'type': {
                readonly 'annotation': GAnnotation;
                readonly 'key': string;
            };
        };
    }
    type Global__Type__Selection<GAnnotation> = [
        'cyclic sibling',
        {
            readonly 'type': {
                readonly 'annotation': GAnnotation;
                readonly 'key': string;
            };
        }
    ] | [
        'import',
        {
            readonly 'library': {
                readonly 'annotation': GAnnotation;
                readonly 'key': string;
            };
            readonly 'type': {
                readonly 'annotation': GAnnotation;
                readonly 'key': string;
            };
        }
    ] | [
        'resolved sibling',
        {
            readonly 'type': {
                readonly 'annotation': GAnnotation;
                readonly 'key': string;
            };
        }
    ];
    namespace Imports {
        type annotation<GAnnotation> = GAnnotation;
        namespace dictionary {
            namespace D {
                type annotation<GAnnotation> = GAnnotation;
                namespace content { }
                type content<GAnnotation> = null;
            }
            type D<GAnnotation> = {
                readonly 'annotation': GAnnotation;
                readonly 'content': null;
            };
        }
        type dictionary<GAnnotation> = pt.Dictionary<{
            readonly 'annotation': GAnnotation;
            readonly 'content': null;
        }>;
    }
    type Imports<GAnnotation> = {
        readonly 'annotation': GAnnotation;
        readonly 'dictionary': pt.Dictionary<{
            readonly 'annotation': GAnnotation;
            readonly 'content': null;
        }>;
    };
    namespace Model {
        namespace root {
            type annotation<GAnnotation> = GAnnotation;
            type key<GAnnotation> = string;
        }
        type root<GAnnotation> = {
            readonly 'annotation': GAnnotation;
            readonly 'key': string;
        };
        type type__library<GAnnotation> = T.Type__Library<GAnnotation>;
    }
    type Model<GAnnotation> = {
        readonly 'root': {
            readonly 'annotation': GAnnotation;
            readonly 'key': string;
        };
        readonly 'type library': T.Type__Library<GAnnotation>;
    };
    type Root<GAnnotation> = T.Model<GAnnotation>;
    namespace Type {
        namespace _ltype {
            namespace array {
                type _ltype<GAnnotation> = T.Type<GAnnotation>;
            }
            type array<GAnnotation> = {
                readonly 'type': T.Type<GAnnotation>;
            };
            namespace atom {
                type atom<GAnnotation> = T.Atom<GAnnotation>;
            }
            type atom<GAnnotation> = {
                readonly 'atom': T.Atom<GAnnotation>;
            };
            namespace component {
                type _ltype<GAnnotation> = T.Global__Type__Selection<GAnnotation>;
            }
            type component<GAnnotation> = {
                readonly 'type': T.Global__Type__Selection<GAnnotation>;
            };
            type constraint<GAnnotation> = T.Type__Selection<GAnnotation>;
            namespace cyclic__reference {
                type atom<GAnnotation> = T.Atom<GAnnotation>;
                type sibling<GAnnotation> = T.Global__Type__Selection<GAnnotation>;
            }
            type cyclic__reference<GAnnotation> = {
                readonly 'atom': T.Atom<GAnnotation>;
                readonly 'sibling': T.Global__Type__Selection<GAnnotation>;
            };
            namespace dictionary {
                namespace constraints {
                    type annotation<GAnnotation> = GAnnotation;
                    namespace dictionary {
                        namespace D {
                            namespace dictionary {
                                namespace dense {
                                    namespace no { }
                                    type no<GAnnotation> = null;
                                    namespace yes { }
                                    type yes<GAnnotation> = null;
                                }
                                type dense<GAnnotation> = ['no', null] | ['yes', null];
                                type dictionary<GAnnotation> = T.Dictionary__Selection<GAnnotation>;
                            }
                            type dictionary<GAnnotation> = {
                                readonly 'dense': ['no', null] | ['yes', null];
                                readonly 'dictionary': T.Dictionary__Selection<GAnnotation>;
                            };
                            type lookup<GAnnotation> = T.Global__Type__Selection<GAnnotation>;
                        }
                        type D<GAnnotation> = [
                            'dictionary',
                            {
                                readonly 'dense': ['no', null] | ['yes', null];
                                readonly 'dictionary': T.Dictionary__Selection<GAnnotation>;
                            }
                        ] | ['lookup', T.Global__Type__Selection<GAnnotation>];
                    }
                    type dictionary<GAnnotation> = pt.Dictionary<[
                        'dictionary',
                        {
                            readonly 'dense': ['no', null] | ['yes', null];
                            readonly 'dictionary': T.Dictionary__Selection<GAnnotation>;
                        }
                    ] | ['lookup', T.Global__Type__Selection<GAnnotation>]>;
                }
                type constraints<GAnnotation> = {
                    readonly 'annotation': GAnnotation;
                    readonly 'dictionary': pt.Dictionary<[
                        'dictionary',
                        {
                            readonly 'dense': ['no', null] | ['yes', null];
                            readonly 'dictionary': T.Dictionary__Selection<GAnnotation>;
                        }
                    ] | ['lookup', T.Global__Type__Selection<GAnnotation>]>;
                };
                type key<GAnnotation> = T.Atom<GAnnotation>;
                type _ltype<GAnnotation> = T.Type<GAnnotation>;
            }
            type dictionary<GAnnotation> = {
                readonly 'constraints': {
                    readonly 'annotation': GAnnotation;
                    readonly 'dictionary': pt.Dictionary<[
                        'dictionary',
                        {
                            readonly 'dense': ['no', null] | ['yes', null];
                            readonly 'dictionary': T.Dictionary__Selection<GAnnotation>;
                        }
                    ] | ['lookup', T.Global__Type__Selection<GAnnotation>]>;
                };
                readonly 'key': T.Atom<GAnnotation>;
                readonly 'type': T.Type<GAnnotation>;
            };
            namespace group {
                namespace properties {
                    type annotation<GAnnotation> = GAnnotation;
                    namespace dictionary {
                        namespace D {
                            type _ltype<GAnnotation> = T.Type<GAnnotation>;
                        }
                        type D<GAnnotation> = {
                            readonly 'type': T.Type<GAnnotation>;
                        };
                    }
                    type dictionary<GAnnotation> = pt.Dictionary<{
                        readonly 'type': T.Type<GAnnotation>;
                    }>;
                }
                type properties<GAnnotation> = {
                    readonly 'annotation': GAnnotation;
                    readonly 'dictionary': pt.Dictionary<{
                        readonly 'type': T.Type<GAnnotation>;
                    }>;
                };
            }
            type group<GAnnotation> = {
                readonly 'properties': {
                    readonly 'annotation': GAnnotation;
                    readonly 'dictionary': pt.Dictionary<{
                        readonly 'type': T.Type<GAnnotation>;
                    }>;
                };
            };
            namespace nothing { }
            type nothing<GAnnotation> = null;
            namespace optional {
                type _ltype<GAnnotation> = T.Type<GAnnotation>;
            }
            type optional<GAnnotation> = {
                readonly 'type': T.Type<GAnnotation>;
            };
            namespace resolved__reference {
                type atom<GAnnotation> = T.Atom<GAnnotation>;
                namespace value {
                    type dictionary<GAnnotation> = T.Dictionary__Selection<GAnnotation>;
                    type lookup<GAnnotation> = T.Global__Type__Selection<GAnnotation>;
                }
                type value<GAnnotation> = ['dictionary', T.Dictionary__Selection<GAnnotation>] | ['lookup', T.Global__Type__Selection<GAnnotation>];
            }
            type resolved__reference<GAnnotation> = {
                readonly 'atom': T.Atom<GAnnotation>;
                readonly 'value': ['dictionary', T.Dictionary__Selection<GAnnotation>] | ['lookup', T.Global__Type__Selection<GAnnotation>];
            };
            namespace state__group {
                namespace states {
                    type annotation<GAnnotation> = GAnnotation;
                    namespace dictionary {
                        namespace D {
                            type _ltype<GAnnotation> = T.Type<GAnnotation>;
                        }
                        type D<GAnnotation> = {
                            readonly 'type': T.Type<GAnnotation>;
                        };
                    }
                    type dictionary<GAnnotation> = pt.Dictionary<{
                        readonly 'type': T.Type<GAnnotation>;
                    }>;
                }
                type states<GAnnotation> = {
                    readonly 'annotation': GAnnotation;
                    readonly 'dictionary': pt.Dictionary<{
                        readonly 'type': T.Type<GAnnotation>;
                    }>;
                };
            }
            type state__group<GAnnotation> = {
                readonly 'states': {
                    readonly 'annotation': GAnnotation;
                    readonly 'dictionary': pt.Dictionary<{
                        readonly 'type': T.Type<GAnnotation>;
                    }>;
                };
            };
        }
        type _ltype<GAnnotation> = [
            'array',
            {
                readonly 'type': T.Type<GAnnotation>;
            }
        ] | [
            'atom',
            {
                readonly 'atom': T.Atom<GAnnotation>;
            }
        ] | [
            'component',
            {
                readonly 'type': T.Global__Type__Selection<GAnnotation>;
            }
        ] | ['constraint', T.Type__Selection<GAnnotation>] | [
            'cyclic reference',
            {
                readonly 'atom': T.Atom<GAnnotation>;
                readonly 'sibling': T.Global__Type__Selection<GAnnotation>;
            }
        ] | [
            'dictionary',
            {
                readonly 'constraints': {
                    readonly 'annotation': GAnnotation;
                    readonly 'dictionary': pt.Dictionary<[
                        'dictionary',
                        {
                            readonly 'dense': ['no', null] | ['yes', null];
                            readonly 'dictionary': T.Dictionary__Selection<GAnnotation>;
                        }
                    ] | ['lookup', T.Global__Type__Selection<GAnnotation>]>;
                };
                readonly 'key': T.Atom<GAnnotation>;
                readonly 'type': T.Type<GAnnotation>;
            }
        ] | [
            'group',
            {
                readonly 'properties': {
                    readonly 'annotation': GAnnotation;
                    readonly 'dictionary': pt.Dictionary<{
                        readonly 'type': T.Type<GAnnotation>;
                    }>;
                };
            }
        ] | ['nothing', null] | [
            'optional',
            {
                readonly 'type': T.Type<GAnnotation>;
            }
        ] | [
            'resolved reference',
            {
                readonly 'atom': T.Atom<GAnnotation>;
                readonly 'value': ['dictionary', T.Dictionary__Selection<GAnnotation>] | ['lookup', T.Global__Type__Selection<GAnnotation>];
            }
        ] | [
            'state group',
            {
                readonly 'states': {
                    readonly 'annotation': GAnnotation;
                    readonly 'dictionary': pt.Dictionary<{
                        readonly 'type': T.Type<GAnnotation>;
                    }>;
                };
            }
        ];
    }
    type Type<GAnnotation> = {
        readonly 'type': [
            'array',
            {
                readonly 'type': T.Type<GAnnotation>;
            }
        ] | [
            'atom',
            {
                readonly 'atom': T.Atom<GAnnotation>;
            }
        ] | [
            'component',
            {
                readonly 'type': T.Global__Type__Selection<GAnnotation>;
            }
        ] | ['constraint', T.Type__Selection<GAnnotation>] | [
            'cyclic reference',
            {
                readonly 'atom': T.Atom<GAnnotation>;
                readonly 'sibling': T.Global__Type__Selection<GAnnotation>;
            }
        ] | [
            'dictionary',
            {
                readonly 'constraints': {
                    readonly 'annotation': GAnnotation;
                    readonly 'dictionary': pt.Dictionary<[
                        'dictionary',
                        {
                            readonly 'dense': ['no', null] | ['yes', null];
                            readonly 'dictionary': T.Dictionary__Selection<GAnnotation>;
                        }
                    ] | ['lookup', T.Global__Type__Selection<GAnnotation>]>;
                };
                readonly 'key': T.Atom<GAnnotation>;
                readonly 'type': T.Type<GAnnotation>;
            }
        ] | [
            'group',
            {
                readonly 'properties': {
                    readonly 'annotation': GAnnotation;
                    readonly 'dictionary': pt.Dictionary<{
                        readonly 'type': T.Type<GAnnotation>;
                    }>;
                };
            }
        ] | ['nothing', null] | [
            'optional',
            {
                readonly 'type': T.Type<GAnnotation>;
            }
        ] | [
            'resolved reference',
            {
                readonly 'atom': T.Atom<GAnnotation>;
                readonly 'value': ['dictionary', T.Dictionary__Selection<GAnnotation>] | ['lookup', T.Global__Type__Selection<GAnnotation>];
            }
        ] | [
            'state group',
            {
                readonly 'states': {
                    readonly 'annotation': GAnnotation;
                    readonly 'dictionary': pt.Dictionary<{
                        readonly 'type': T.Type<GAnnotation>;
                    }>;
                };
            }
        ];
    };
    namespace Type__Library {
        type atom__types<GAnnotation> = T.Atom__Types<GAnnotation>;
        namespace global__types {
            type annotation<GAnnotation> = GAnnotation;
            namespace dictionary {
                type D<GAnnotation> = T.Global__Type<GAnnotation>;
            }
            type dictionary<GAnnotation> = pt.Dictionary<T.Global__Type<GAnnotation>>;
        }
        type global__types<GAnnotation> = {
            readonly 'annotation': GAnnotation;
            readonly 'dictionary': pt.Dictionary<T.Global__Type<GAnnotation>>;
        };
        type imports<GAnnotation> = T.Imports<GAnnotation>;
    }
    type Type__Library<GAnnotation> = {
        readonly 'atom types': T.Atom__Types<GAnnotation>;
        readonly 'global types': {
            readonly 'annotation': GAnnotation;
            readonly 'dictionary': pt.Dictionary<T.Global__Type<GAnnotation>>;
        };
        readonly 'imports': T.Imports<GAnnotation>;
    };
    namespace Type__Selection {
        namespace global__type {
            type annotation<GAnnotation> = GAnnotation;
            type key<GAnnotation> = string;
        }
        type global__type<GAnnotation> = {
            readonly 'annotation': GAnnotation;
            readonly 'key': string;
        };
        namespace _limport {
            namespace O {
                type annotation<GAnnotation> = GAnnotation;
                type key<GAnnotation> = string;
            }
            type O<GAnnotation> = {
                readonly 'annotation': GAnnotation;
                readonly 'key': string;
            };
        }
        type _limport<GAnnotation> = [false] | [
            true,
            {
                readonly 'annotation': GAnnotation;
                readonly 'key': string;
            }
        ];
        namespace tail {
            type O<GAnnotation> = T.Type__Selection__Tail<GAnnotation>;
        }
        type tail<GAnnotation> = [false] | [true, T.Type__Selection__Tail<GAnnotation>];
    }
    type Type__Selection<GAnnotation> = {
        readonly 'global type': {
            readonly 'annotation': GAnnotation;
            readonly 'key': string;
        };
        readonly 'import': [false] | [
            true,
            {
                readonly 'annotation': GAnnotation;
                readonly 'key': string;
            }
        ];
        readonly 'tail': [false] | [true, T.Type__Selection__Tail<GAnnotation>];
    };
    namespace Type__Selection__Tail {
        namespace step__type {
            namespace array {
                type array<GAnnotation> = GAnnotation;
            }
            type array<GAnnotation> = {
                readonly 'array': GAnnotation;
            };
            namespace dictionary {
                type dictionary<GAnnotation> = GAnnotation;
            }
            type dictionary<GAnnotation> = {
                readonly 'dictionary': GAnnotation;
            };
            namespace group {
                type group<GAnnotation> = GAnnotation;
                namespace property {
                    type annotation<GAnnotation> = GAnnotation;
                    type key<GAnnotation> = string;
                }
                type property<GAnnotation> = {
                    readonly 'annotation': GAnnotation;
                    readonly 'key': string;
                };
            }
            type group<GAnnotation> = {
                readonly 'group': GAnnotation;
                readonly 'property': {
                    readonly 'annotation': GAnnotation;
                    readonly 'key': string;
                };
            };
            namespace optional {
                type optional<GAnnotation> = GAnnotation;
            }
            type optional<GAnnotation> = {
                readonly 'optional': GAnnotation;
            };
            namespace state__group {
                namespace state {
                    type annotation<GAnnotation> = GAnnotation;
                    type key<GAnnotation> = string;
                }
                type state<GAnnotation> = {
                    readonly 'annotation': GAnnotation;
                    readonly 'key': string;
                };
                type state__group<GAnnotation> = GAnnotation;
            }
            type state__group<GAnnotation> = {
                readonly 'state': {
                    readonly 'annotation': GAnnotation;
                    readonly 'key': string;
                };
                readonly 'state group': GAnnotation;
            };
        }
        type step__type<GAnnotation> = [
            'array',
            {
                readonly 'array': GAnnotation;
            }
        ] | [
            'dictionary',
            {
                readonly 'dictionary': GAnnotation;
            }
        ] | [
            'group',
            {
                readonly 'group': GAnnotation;
                readonly 'property': {
                    readonly 'annotation': GAnnotation;
                    readonly 'key': string;
                };
            }
        ] | [
            'optional',
            {
                readonly 'optional': GAnnotation;
            }
        ] | [
            'state group',
            {
                readonly 'state': {
                    readonly 'annotation': GAnnotation;
                    readonly 'key': string;
                };
                readonly 'state group': GAnnotation;
            }
        ];
        namespace tail {
            type O<GAnnotation> = T.Type__Selection__Tail<GAnnotation>;
        }
        type tail<GAnnotation> = [false] | [true, T.Type__Selection__Tail<GAnnotation>];
    }
    type Type__Selection__Tail<GAnnotation> = {
        readonly 'step type': [
            'array',
            {
                readonly 'array': GAnnotation;
            }
        ] | [
            'dictionary',
            {
                readonly 'dictionary': GAnnotation;
            }
        ] | [
            'group',
            {
                readonly 'group': GAnnotation;
                readonly 'property': {
                    readonly 'annotation': GAnnotation;
                    readonly 'key': string;
                };
            }
        ] | [
            'optional',
            {
                readonly 'optional': GAnnotation;
            }
        ] | [
            'state group',
            {
                readonly 'state': {
                    readonly 'annotation': GAnnotation;
                    readonly 'key': string;
                };
                readonly 'state group': GAnnotation;
            }
        ];
        readonly 'tail': [false] | [true, T.Type__Selection__Tail<GAnnotation>];
    };
}
