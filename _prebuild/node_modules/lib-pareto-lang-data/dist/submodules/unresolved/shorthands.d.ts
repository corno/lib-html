import * as pd from 'pareto-core-data';
import * as g_this from "./glossary";
type RawDictionary<T> = {
    [key: string]: T;
};
export declare function typeLibrary(imports: RawDictionary<g_this.T.Imports.dictionary.D<pd.SourceLocation>>, atomTypes: RawDictionary<g_this.T.Atom__Types.dictionary.D<pd.SourceLocation>>, globalTypes: RawDictionary<g_this.T.Global__Type<pd.SourceLocation>>): g_this.T.Type__Library<pd.SourceLocation>;
export declare function array(type: g_this.T.Type<pd.SourceLocation>): g_this.T.Type<pd.SourceLocation>;
export declare function optional(type: g_this.T.Type<pd.SourceLocation>): g_this.T.Type<pd.SourceLocation>;
export declare function nothing(): g_this.T.Type<pd.SourceLocation>;
export declare function prop(type: g_this.T.Type<pd.SourceLocation>): g_this.T.Type<pd.SourceLocation>;
export declare function dictionaryReference(type: g_this.T.Type__Selection<pd.SourceLocation>): g_this.T.Type<pd.SourceLocation>;
export declare function lookupReference(type: g_this.T.Global__Type__Selection<pd.SourceLocation>): g_this.T.Type<pd.SourceLocation>;
export declare function cyclicReference(gloRef: g_this.T.Global__Type__Selection<pd.SourceLocation>): g_this.T.Type<pd.SourceLocation>;
export declare function lookupConstraint(gloSel: g_this.T.Global__Type__Selection<pd.SourceLocation>): g_this.T.Type._ltype.dictionary.constraints.dictionary.D<pd.SourceLocation>;
export declare function dictionaryConstraint(type: g_this.T.Type__Selection<pd.SourceLocation>, dense: boolean): g_this.T.Type._ltype.dictionary.constraints.dictionary.D<pd.SourceLocation>;
export declare function constrainedDictionary(constraints: RawDictionary<g_this.T.Type._ltype.dictionary.constraints.dictionary.D<pd.SourceLocation>>, type: g_this.T.Type<pd.SourceLocation>): g_this.T.Type<pd.SourceLocation>;
export declare function dictionary(type: g_this.T.Type<pd.SourceLocation>): g_this.T.Type<pd.SourceLocation>;
export declare function constraint(type: g_this.T.Type__Selection<pd.SourceLocation>): g_this.T.Type<pd.SourceLocation>;
export declare function globalType(type: g_this.T.Type<pd.SourceLocation>): g_this.T.Global__Type<pd.SourceLocation>;
export declare function group(rawProperties: RawDictionary<g_this.T.Type<pd.SourceLocation>>): g_this.T.Type<pd.SourceLocation>;
export declare function state(type: g_this.T.Type<pd.SourceLocation>): g_this.T.Type._ltype.state__group.states.dictionary.D<pd.SourceLocation>;
export declare function stateGroup(states: RawDictionary<g_this.T.Type._ltype.state__group.states.dictionary.D<pd.SourceLocation>>): g_this.T.Type<pd.SourceLocation>;
export declare function atom(type: string): g_this.T.Type<pd.SourceLocation>;
export declare function t_grp(prop: string, tail?: g_this.T.Type__Selection__Tail<pd.SourceLocation>): g_this.T.Type__Selection__Tail<pd.SourceLocation>;
export declare function t_dict(tail?: g_this.T.Type__Selection__Tail<pd.SourceLocation>): g_this.T.Type__Selection__Tail<pd.SourceLocation>;
export declare function t_arr(tail?: g_this.T.Type__Selection__Tail<pd.SourceLocation>): g_this.T.Type__Selection__Tail<pd.SourceLocation>;
export declare function t_sg(opt: string, tail?: g_this.T.Type__Selection__Tail<pd.SourceLocation>): g_this.T.Type__Selection__Tail<pd.SourceLocation>;
export declare function externalTypeSelection(imp: string, globalType: string, tail?: g_this.T.Type__Selection__Tail<pd.SourceLocation>): g_this.T.Type__Selection<pd.SourceLocation>;
export declare function typeSelection(globalType: string, tail?: g_this.T.Type__Selection__Tail<pd.SourceLocation>): g_this.T.Type__Selection<pd.SourceLocation>;
export declare function component(type: g_this.T.Global__Type__Selection<pd.SourceLocation>): g_this.T.Type<pd.SourceLocation>;
export declare function typeRef(type: string, cyclic?: boolean): g_this.T.Global__Type__Selection<pd.SourceLocation>;
export declare function imported(library: string, type: string): g_this.T.Global__Type__Selection<pd.SourceLocation>;
export {};
