import * as pt from 'pareto-core-types';
import * as g_in from "../../resolved";
export declare namespace N { }
export declare namespace T {
    namespace Atom__Mappings {
        namespace D {
            type _lboolean = null;
            type _lnumber = null;
            type _lstring = null;
        }
        type D = ['boolean', null] | ['number', null] | ['string', null];
    }
    type Atom__Mappings = pt.Dictionary<['boolean', null] | ['number', null] | ['string', null]>;
    namespace MapParameters {
        type atom__mappings = T.Atom__Mappings;
        type library = g_in.T.Type__Library;
        type mapping__settings = T.Mapping__Settings;
    }
    type MapParameters = {
        readonly 'atom mappings': T.Atom__Mappings;
        readonly 'library': g_in.T.Type__Library;
        readonly 'mapping settings': T.Mapping__Settings;
    };
    namespace Mapping__Settings {
        namespace constraints__mapping {
            namespace constraints {
                namespace O {
                    namespace optional { }
                    type optional = null;
                    namespace required { }
                    type required = null;
                }
                type O = ['optional', null] | ['required', null];
            }
            type constraints = [false] | [
                true,
                ['optional', null] | ['required', null]
            ];
            type terminal__values = boolean;
        }
        type constraints__mapping = {
            readonly 'constraints': [false] | [
                true,
                ['optional', null] | ['required', null]
            ];
            readonly 'terminal values': boolean;
        };
        type create__annotations = boolean;
    }
    type Mapping__Settings = {
        readonly 'constraints mapping': {
            readonly 'constraints': [false] | [
                true,
                ['optional', null] | ['required', null]
            ];
            readonly 'terminal values': boolean;
        };
        readonly 'create annotations': boolean;
    };
}
