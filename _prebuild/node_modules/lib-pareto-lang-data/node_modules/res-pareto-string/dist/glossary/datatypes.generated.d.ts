import * as pt from 'pareto-core-types';
export declare namespace N { }
export declare namespace T {
    namespace CharacterArray {
        type A = number;
    }
    type CharacterArray = pt.Array<number>;
    namespace EscapeParameters {
        type escape = string;
        namespace patterns__to__escape {
            type A = string;
        }
        type patterns__to__escape = pt.Array<string>;
        type _lstring = string;
    }
    type EscapeParameters = {
        readonly 'escape': string;
        readonly 'patterns to escape': pt.Array<string>;
        readonly 'string': string;
    };
    namespace JoinData {
        type first = string;
        type second = string;
    }
    type JoinData = {
        readonly 'first': string;
        readonly 'second': string;
    };
    namespace ReplaceAllData {
        type pattern = string;
        type replacement = string;
        type value = string;
    }
    type ReplaceAllData = {
        readonly 'pattern': string;
        readonly 'replacement': string;
        readonly 'value': string;
    };
    namespace SplitData {
        type splitter = string;
        type value = string;
    }
    type SplitData = {
        readonly 'splitter': string;
        readonly 'value': string;
    };
    namespace SplitIn2Result {
        type first = string;
        namespace second {
            type O = string;
        }
        type second = [false] | [true, string];
    }
    type SplitIn2Result = {
        readonly 'first': string;
        readonly 'second': [false] | [true, string];
    };
    namespace SplitResult {
        type A = string;
    }
    type SplitResult = pt.Array<string>;
    namespace StartsWithData {
        type contextString = string;
        type searchString = string;
    }
    type StartsWithData = {
        readonly 'contextString': string;
        readonly 'searchString': string;
    };
    namespace SubstrData {
        type begin = number;
        type length = number;
        type value = string;
    }
    type SubstrData = {
        readonly 'begin': number;
        readonly 'length': number;
        readonly 'value': string;
    };
}
