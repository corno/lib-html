import * as pt from "pareto-core-types";
type KeyValuePair<T> = {
    key: string;
    value: T;
};
type DictionaryAsArray<T> = KeyValuePair<T>[];
export declare class Dictionary<T> implements pt.Dictionary<T> {
    private source;
    constructor(source: DictionaryAsArray<T>);
    map<NT>($v: (entry: T) => NT): Dictionary<NT>;
    asyncMap<NT>($v: ($: T) => pt.AsyncValue<NT>): pt.AsyncValue<pt.Dictionary<NT>>;
    __mapWithKey<NT>($v: (entry: T, key: string) => NT): Dictionary<NT>;
    __forEach(isFirstBeforeSecond: (a: string, b: string) => boolean, callback: ($: T, key: string) => void): void;
    __unsafeGetEntry(key: string): T;
    __getEntry<NT>(key: string, exists: ($: T) => NT, nonExists: () => NT): NT;
}
export declare function wrapRawDictionary<T>(sourceX: {
    [key: string]: T;
}): pt.Dictionary<T>;
export {};
