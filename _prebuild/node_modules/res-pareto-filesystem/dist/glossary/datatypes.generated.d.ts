import * as pt from 'pareto-core-types';
import * as g_common from "glo-pareto-common";
export declare namespace N { }
export declare namespace T {
    namespace AnnotatedError {
        type error<TError> = TError;
        type path<TError> = g_common.T.String;
    }
    type AnnotatedError<TError> = {
        readonly 'error': TError;
        readonly 'path': g_common.T.String;
    };
    type AnnotatedMkdirError = T.AnnotatedError<T.MkdirError>;
    type AnnotatedReadDirError = T.AnnotatedError<T.ReadDirError>;
    type AnnotatedReadFileError = T.AnnotatedError<T.ReadFileError>;
    type AnnotatedRmdirError = T.AnnotatedError<T.RmdirError>;
    type AnnotatedUnlinkError = T.AnnotatedError<T.UnlinkError>;
    type AnnotatedWriteFileError = T.AnnotatedError<T.WriteFileError>;
    namespace DirNodeData {
        type path = string;
        namespace _ltype {
            type directory = null;
            type file = null;
            type _lunknown = null;
        }
        type _ltype = ['directory', null] | ['file', null] | ['unknown', null];
    }
    type DirNodeData = {
        readonly 'path': string;
        readonly 'type': ['directory', null] | ['file', null] | ['unknown', null];
    };
    namespace Mkdir_$Data {
        type createContainingDirectories = boolean;
        type path = g_common.T.Path;
    }
    type Mkdir_$Data = {
        readonly 'createContainingDirectories': boolean;
        readonly 'path': g_common.T.Path;
    };
    type Mkdir_$Result = T.Result<T.AnnotatedMkdirError, g_common.T.Null>;
    namespace MkdirError {
        type exists = null;
        type no__entity = null;
        namespace _lunknown {
            type message = string;
        }
        type _lunknown = {
            readonly 'message': string;
        };
    }
    type MkdirError = ['exists', null] | ['no entity', null] | [
        'unknown',
        {
            readonly 'message': string;
        }
    ];
    namespace ReadDirectory_$Data {
        type path = g_common.T.Path;
    }
    type ReadDirectory_$Data = {
        readonly 'path': g_common.T.Path;
    };
    type ReadDirectory_$Result = T.Result<T.AnnotatedReadDirError, T.ReadDirectory_$Success>;
    namespace ReadDirectory_$Success {
        type D = T.DirNodeData;
    }
    type ReadDirectory_$Success = pt.Dictionary<T.DirNodeData>;
    namespace ReadDirError {
        type is__not__directory = null;
        type no__entity = null;
        namespace _lunknown {
            type message = string;
        }
        type _lunknown = {
            readonly 'message': string;
        };
    }
    type ReadDirError = ['is not directory', null] | ['no entity', null] | [
        'unknown',
        {
            readonly 'message': string;
        }
    ];
    namespace ReadFile_$Data {
        type path = g_common.T.Path;
    }
    type ReadFile_$Data = {
        readonly 'path': g_common.T.Path;
    };
    type ReadFile_$Result = T.Result<T.AnnotatedReadFileError, g_common.T.String>;
    namespace ReadFileError {
        type is__directory = null;
        type no__entity = null;
        namespace _lunknown {
            type message = string;
        }
        type _lunknown = {
            readonly 'message': string;
        };
    }
    type ReadFileError = ['is directory', null] | ['no entity', null] | [
        'unknown',
        {
            readonly 'message': string;
        }
    ];
    namespace Result {
        type error<TError, TSuccess> = TError;
        type success<TError, TSuccess> = TSuccess;
    }
    type Result<TError, TSuccess> = ['error', TError] | ['success', TSuccess];
    namespace RmdirError {
        type no__entity = null;
        type not__empty = null;
        namespace _lunknown {
            type message = string;
        }
        type _lunknown = {
            readonly 'message': string;
        };
    }
    type RmdirError = ['no entity', null] | ['not empty', null] | [
        'unknown',
        {
            readonly 'message': string;
        }
    ];
    namespace Unlink_$Data {
        type path = g_common.T.Path;
    }
    type Unlink_$Data = {
        readonly 'path': g_common.T.Path;
    };
    type Unlink_$Result = T.Result<T.AnnotatedUnlinkError, g_common.T.Null>;
    namespace UnlinkError {
        type is__directory = null;
        type no__entity = null;
        namespace _lunknown {
            type message = string;
        }
        type _lunknown = {
            readonly 'message': string;
        };
    }
    type UnlinkError = ['is directory', null] | ['no entity', null] | [
        'unknown',
        {
            readonly 'message': string;
        }
    ];
    namespace WriteFileError {
        type is__directory = null;
        type no__entity = null;
        namespace _lunknown {
            type message = string;
        }
        type _lunknown = {
            readonly 'message': string;
        };
    }
    type WriteFileError = ['is directory', null] | ['no entity', null] | [
        'unknown',
        {
            readonly 'message': string;
        }
    ];
    namespace WriteFileParameters {
        type create__containing__directories = boolean;
        type overwrite__if__exists = boolean;
        type path = g_common.T.Path;
    }
    type WriteFileParameters = {
        readonly 'create containing directories': boolean;
        readonly 'overwrite if exists': boolean;
        readonly 'path': g_common.T.Path;
    };
}
