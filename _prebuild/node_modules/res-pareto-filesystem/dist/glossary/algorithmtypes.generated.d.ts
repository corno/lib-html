import * as pt from 'pareto-core-types';
import { T } from "./datatypes.generated";
import * as g_common from "glo-pareto-common";
export declare namespace ASYNC {
    namespace I {
        type OnFileWriteError = ($: T.AnnotatedWriteFileError) => void;
        type StringStreamConsumer = {
            'data': ($: g_common.T.String) => void;
            'end': () => void;
        };
        type WriteFile = ($: T.WriteFileParameters) => ASYNC.I.StringStreamConsumer;
    }
    namespace A {
        namespace C {
            type CreateFileWriter = {
                'construct': ($is: {
                    readonly 'onWriteFileError': ASYNC.I.OnFileWriteError;
                }) => ASYNC.I.WriteFile;
            };
        }
        namespace F {
            type MakeDirectory = ($: T.Mkdir_$Data) => pt.AsyncValue<T.Mkdir_$Result>;
        }
        namespace F {
            type ReadDirectory = ($: T.ReadDirectory_$Data) => pt.AsyncValue<T.ReadDirectory_$Result>;
        }
        namespace F {
            type Unlink = ($: T.Unlink_$Data) => pt.AsyncValue<T.Unlink_$Result>;
        }
    }
}
export declare namespace SYNC { }
