import * as pd from 'pareto-core-data';
import * as t from "./glossary";
type RawDictionary<T> = {
    [key: string]: T;
};
export declare function ns(namespaces: RawDictionary<t.T.Local__Namespace.namespaces.dictionary.D<pd.SourceLocation>>, typeParameters: RawDictionary<t.T.Type__Parameters.local.dictionary.D<pd.SourceLocation>>, types: RawDictionary<t.T.Type<pd.SourceLocation>>): t.T.Local__Namespace<pd.SourceLocation>;
export declare function parentSibling(name: string): t.T.Namespace__2<pd.SourceLocation>;
export declare function local(typeParameters: RawDictionary<t.T.Type__Parameters.local.dictionary.D<pd.SourceLocation>>, namespaces: RawDictionary<t.T.Local__Namespace.namespaces.dictionary.D<pd.SourceLocation>>, types: RawDictionary<t.T.Type<pd.SourceLocation>>): t.T.Namespace__2<pd.SourceLocation>;
export declare function valueFunction(typeParameters: RawDictionary<t.T.Type__Parameters.local.dictionary.D<pd.SourceLocation>>, context: t.T.Type<pd.SourceLocation>, parameters: RawDictionary<t.T.Function__Declaration.parameters.dictionary.D<pd.SourceLocation>>, returnType: t.T.Type<pd.SourceLocation>): t.T.Type<pd.SourceLocation>;
export declare function addressFunction(typeParameters: RawDictionary<t.T.Type__Parameters.local.dictionary.D<pd.SourceLocation>>, context: t.T.Type<pd.SourceLocation>, parameters: RawDictionary<t.T.Function__Declaration.parameters.dictionary.D<pd.SourceLocation>>, returnType: t.T.Type<pd.SourceLocation>): t.T.Type<pd.SourceLocation>;
export declare function procedure(typeParameters: RawDictionary<t.T.Type__Parameters.local.dictionary.D<pd.SourceLocation>>, context: t.T.Type<pd.SourceLocation>, parameters: RawDictionary<t.T.Function__Declaration.parameters.dictionary.D<pd.SourceLocation>>, returnType: t.T.Type<pd.SourceLocation>): t.T.Type<pd.SourceLocation>;
export declare function null_(): t.T.Type<pd.SourceLocation>;
export declare function string(): t.T.Type<pd.SourceLocation>;
export declare function number(): t.T.Type<pd.SourceLocation>;
export declare function boolean(): t.T.Type<pd.SourceLocation>;
export declare function group(properties: RawDictionary<t.T.Type.group.dictionary.D<pd.SourceLocation>>): t.T.Type<pd.SourceLocation>;
export declare function prop(type: t.T.Type<pd.SourceLocation>): t.T.Type.group.dictionary.D<pd.SourceLocation>;
export declare function propMutable(type: t.T.Type<pd.SourceLocation>): t.T.Type.group.dictionary.D<pd.SourceLocation>;
export declare function taggedUnion(options: RawDictionary<t.T.Type.tagged__union.dictionary.D<pd.SourceLocation>>): t.T.Type<pd.SourceLocation>;
export declare function array(type: t.T.Type<pd.SourceLocation>): t.T.Type<pd.SourceLocation>;
export declare function computed(type: t.T.Type<pd.SourceLocation>): t.T.Type<pd.SourceLocation>;
export declare function optional(type: t.T.Type<pd.SourceLocation>): t.T.Type<pd.SourceLocation>;
export declare function dictionary(type: t.T.Type<pd.SourceLocation>): t.T.Type<pd.SourceLocation>;
export declare function step(ns: string, args?: RawDictionary<t.T.Type__Arguments.dictionary.D<pd.SourceLocation>>, tail?: t.T.Namespace__Selection<pd.SourceLocation>): t.T.Namespace__Selection<pd.SourceLocation>;
export declare function typeArgument(type: t.T.Type<pd.SourceLocation>): t.T.Type__Arguments.dictionary.D<pd.SourceLocation>;
export declare function externalTypeReference(nsPath: t.T.Namespace__Selection<pd.SourceLocation>, type: string): t.T.Type<pd.SourceLocation>;
export declare function typeParameter(typeParameter: string): t.T.Type<pd.SourceLocation>;
export declare function typeReference(type: string, cyclic?: boolean): t.T.Type<pd.SourceLocation>;
export {};
