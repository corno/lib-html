"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$$ = void 0;
const pd = __importStar(require("pareto-core-dev"));
const a_this = __importStar(require("../../submodules/serialize"));
const a_foreach = __importStar(require("res-pareto-foreach"));
const a_typescript = __importStar(require("res-typescript"));
const a_collation = __importStar(require("res-pareto-collation"));
const a_dicitionary = __importStar(require("res-pareto-dictionary"));
const a_fp = __importStar(require("lib-fountain-pen"));
const $$ = () => {
    return ($) => {
        a_fp.$b.createFile()(($i) => {
            $i($.path, ($i) => {
                a_this.$a.serialize({
                    'filter': a_dicitionary.$r.filter(),
                    'createApostrophedString': a_typescript.$r.createApostrophedString(),
                    'createIdentifier': a_typescript.$r.createIdentifier(),
                    'dictionaryForEach': a_foreach.$r.dictionaryForEach({
                        'compare': a_collation.$r.localeIsABeforeB()
                    }),
                    'enrichedDictionaryForEach': a_foreach.$r.enrichedDictionaryForEach({
                        'compare': a_collation.$r.localeIsABeforeB()
                    }),
                    'escape': a_typescript.$r.escape(),
                    'isEmpty': a_dicitionary.$r.isEmpty(),
                    'mergeAndIgnore': a_dicitionary.$r.mergeAndIgnore({
                        'error': {
                            'data': ($) => {
                                pd.logDebugMessage(`MERGE KEY ERROR: ${$}`);
                            },
                            'end': () => {
                            }
                        }
                    }),
                })($.data, $i);
            });
        }, {
            'logError': ($) => {
            }
        });
    };
};
exports.$$ = $$;
