import * as pt from 'pareto-core-types';
export declare namespace N { }
export declare namespace T {
    namespace Dictionary {
        type D<TType> = TType;
    }
    type Dictionary<TType> = pt.Dictionary<TType>;
    namespace DictionaryAndKey {
        namespace dictionary {
            type D<TType> = TType;
        }
        type dictionary<TType> = pt.Dictionary<TType>;
        type key<TType> = string;
    }
    type DictionaryAndKey<TType> = {
        readonly 'dictionary': pt.Dictionary<TType>;
        readonly 'key': string;
    };
    namespace Error {
        type key = string;
    }
    type Error = {
        readonly 'key': string;
    };
    namespace FilterableDictionary {
        namespace D {
            type O<TType> = TType;
        }
        type D<TType> = [false] | [true, TType];
    }
    type FilterableDictionary<TType> = pt.Dictionary<[false] | [true, TType]>;
    namespace KeyValuePair {
        type key<TType> = string;
        type value<TType> = TType;
    }
    type KeyValuePair<TType> = {
        readonly 'key': string;
        readonly 'value': TType;
    };
    namespace MergeDictionariesParameters {
        namespace dictionaries {
            type D<TType> = T.Dictionary<TType>;
        }
        type dictionaries<TType> = pt.Dictionary<T.Dictionary<TType>>;
        type escape<TType> = string;
        type separator<TType> = string;
    }
    type MergeDictionariesParameters<TType> = {
        readonly 'dictionaries': pt.Dictionary<T.Dictionary<TType>>;
        readonly 'escape': string;
        readonly 'separator': string;
    };
    namespace MergeParameters {
        type primary<TType> = T.Dictionary<TType>;
        type secondary<TType> = T.Dictionary<TType>;
    }
    type MergeParameters<TType> = {
        readonly 'primary': T.Dictionary<TType>;
        readonly 'secondary': T.Dictionary<TType>;
    };
    namespace UnsafeAddEntryParameters {
        type dictionary<TType> = T.Dictionary<TType>;
        type keyValuePair<TType> = T.KeyValuePair<TType>;
    }
    type UnsafeAddEntryParameters<TType> = {
        readonly 'dictionary': T.Dictionary<TType>;
        readonly 'keyValuePair': T.KeyValuePair<TType>;
    };
}
