import * as pt from 'pareto-core-types';
export declare namespace N { }
export declare namespace T {
    namespace AnnotatedDictionary {
        type annotation<TAnnotation, TType> = TAnnotation;
        namespace dictionary {
            type D<TAnnotation, TType> = TType;
        }
        type dictionary<TAnnotation, TType> = pt.Dictionary<TType>;
    }
    type AnnotatedDictionary<TAnnotation, TType> = {
        readonly 'annotation': TAnnotation;
        readonly 'dictionary': pt.Dictionary<TType>;
    };
    namespace AnnotatedKey {
        type annotation<TAnnotation> = TAnnotation;
        type key<TAnnotation> = string;
    }
    type AnnotatedKey<TAnnotation> = {
        readonly 'annotation': TAnnotation;
        readonly 'key': string;
    };
    namespace AnnotatedKeyReferencePair {
        type annotation<TAnnotation, TReferencedType> = TAnnotation;
        type key<TAnnotation, TReferencedType> = string;
        type referencedValue<TAnnotation, TReferencedType> = TReferencedType;
    }
    type AnnotatedKeyReferencePair<TAnnotation, TReferencedType> = {
        readonly 'annotation': TAnnotation;
        readonly 'key': string;
        readonly 'referencedValue': TReferencedType;
    };
    namespace AnnotatedReference {
        type annotation<TAnnotation, TReferencedType> = TAnnotation;
        type referencedValue<TAnnotation, TReferencedType> = TReferencedType;
    }
    type AnnotatedReference<TAnnotation, TReferencedType> = {
        readonly 'annotation': TAnnotation;
        readonly 'referencedValue': TReferencedType;
    };
    namespace Array {
        type A<TType> = TType;
    }
    type Array<TType> = pt.Array<TType>;
    type Boolean = boolean;
    namespace Computed {
        type C<TType> = TType;
    }
    type Computed<TType> = () => TType;
    namespace Dictionary {
        type D<TType> = TType;
    }
    type Dictionary<TType> = pt.Dictionary<TType>;
    type Null = null;
    type Number = number;
    namespace Optional {
        type O<TType> = TType;
    }
    type Optional<TType> = [false] | [true, TType];
    namespace Path {
        type A = string;
    }
    type Path = pt.Array<string>;
    type String = string;
}
