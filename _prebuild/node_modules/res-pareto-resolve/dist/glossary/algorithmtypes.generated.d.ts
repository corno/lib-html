import * as pt from 'pareto-core-types';
import { T } from "./datatypes.generated";
export declare namespace ASYNC {
    namespace I { }
    namespace A { }
}
export declare namespace SYNC {
    namespace I {
        type OnError = ($: T.Error) => void;
    }
    namespace A {
        namespace F {
            type SafeResolveDictionary = <TIn, TOut>($: T.Dictionary<TIn>, $c: {
                'map': ($: T.KeyValuePair<TIn>, $l: {
                    'all siblings': pt.Lookup<T.AnySibling<TOut>>;
                    'non circular siblings': pt.Lookup<TOut>;
                }) => TOut;
            }) => T.Dictionary<TOut>;
        }
        namespace F {
            type SortTopologically = <TType>($: T.Dictionary<TType>, $c: {
                'map': ($: TType) => T.NullDictionary;
            }) => T.Array<TType>;
        }
        namespace F {
            type UnsafeResolveDictionary = <TIn, TOut>($: T.Dictionary<TIn>, $c: {
                'map': ($: T.KeyValuePair<TIn>, $l: {
                    'all siblings': pt.Lookup<T.AnySibling<TOut>>;
                    'non circular siblings': pt.Lookup<TOut>;
                }) => TOut;
            }) => T.Dictionary<TOut>;
        }
    }
}
