"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$$ = void 0;
const pi = __importStar(require("pareto-core-internals"));
class ResolveError extends Error {
}
const $$ = ($se) => {
    return ($, $c) => {
        const subscribed = {};
        const source = $;
        const finished = {};
        const statusDictionary = {};
        function processEntry($, keyOfEntryBeingProcessed) {
            statusDictionary[keyOfEntryBeingProcessed] = ['processing', null];
            const entry = $c.map({
                'key': keyOfEntryBeingProcessed,
                'value': $,
            }, {
                'all siblings': {
                    __unsafeGetEntry(key) {
                        return () => {
                            console.error("IMPLEMENT RESOLVE CIRCULAR  LOOKUP");
                            return pi.panic("IMPLEMENT RESOLVE CIRCULAR LOOKUP");
                        };
                    },
                    __getEntry(key, exists, nonExists) {
                        if (subscribed[key] === undefined) {
                            subscribed[key] = { 'entry': null };
                        }
                        const subscr = subscribed[key];
                        return exists(() => {
                            if (subscr.entry === null) {
                                pi.panic(`entry not set: ${key}`);
                            }
                            return subscr.entry;
                        });
                    },
                },
                'non circular siblings': {
                    __unsafeGetEntry(key) {
                        const status = statusDictionary[key];
                        if (status === undefined) {
                            return source.__getEntry(key, ($) => processEntry($, key), () => {
                                $se.onError(`no such entry: '${key}'`);
                                throw new ResolveError("");
                            });
                        }
                        else {
                            return pi.cc(status, (s) => {
                                switch (s[0]) {
                                    case 'failed':
                                        return pi.ss(s, (s) => {
                                            //nothing to report
                                            throw new ResolveError("");
                                        });
                                    case 'processing':
                                        if (key === keyOfEntryBeingProcessed) {
                                            $se.onError(`'${key}' is referencing itself`);
                                        }
                                        else {
                                            const keys = [];
                                            Object.keys(statusDictionary).forEach((key) => {
                                                if (statusDictionary[key][0] === 'processing') {
                                                    keys.push(key);
                                                }
                                            });
                                            $se.onError(`the following entries are referencing each other: ${keys.join(", ")}`);
                                        }
                                        statusDictionary[keyOfEntryBeingProcessed] = ['failed', null];
                                        throw new ResolveError("");
                                    case 'success':
                                        return s[1];
                                    default: return pi.au(s[0]);
                                }
                            });
                        }
                    },
                    __getEntry(key, exists, nonExists) {
                        const status = statusDictionary[key];
                        if (status === undefined) {
                            return source.__getEntry(key, ($) => exists(processEntry($, key)), () => {
                                $se.onError(`no such entry: '${key}'`);
                                nonExists();
                                throw new ResolveError("");
                            });
                        }
                        else {
                            return pi.cc(status, (s) => {
                                switch (s[0]) {
                                    case 'failed':
                                        return pi.ss(s, (s) => {
                                            //nothing to report
                                            nonExists();
                                            throw new ResolveError("");
                                        });
                                    case 'processing':
                                        if (key === keyOfEntryBeingProcessed) {
                                            $se.onError(`'${key}' is referencing itself`);
                                        }
                                        else {
                                            const keys = [];
                                            Object.keys(statusDictionary).forEach((key) => {
                                                if (statusDictionary[key][0] === 'processing') {
                                                    keys.push(key);
                                                }
                                            });
                                            $se.onError(`the following entries are referencing each other: ${keys.join(", ")}`);
                                        }
                                        statusDictionary[keyOfEntryBeingProcessed] = ['failed', null];
                                        nonExists();
                                        throw new ResolveError("");
                                    case 'success':
                                        return exists(s[1]);
                                    default: return pi.au(s[0]);
                                }
                            });
                        }
                    },
                },
            });
            finished[keyOfEntryBeingProcessed] = entry;
            statusDictionary[keyOfEntryBeingProcessed] = ['success', entry];
            return entry;
        }
        $.__forEach(() => false, ($, key) => {
            try {
                if (statusDictionary[key] === undefined) {
                    processEntry($, key);
                }
            }
            catch (e) {
                if (e instanceof ResolveError) {
                    //error should have been reported
                }
                else {
                    throw e;
                }
            }
        });
        Object.keys(subscribed).forEach(key => {
            if (finished[key] === undefined) {
                pi.panic(`Entry does not exist: ${key}`);
            }
            subscribed[key].entry = finished[key];
        });
        return pi.wrapRawDictionary(finished);
    };
};
exports.$$ = $$;
