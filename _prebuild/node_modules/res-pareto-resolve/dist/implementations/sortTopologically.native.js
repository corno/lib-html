"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$$ = void 0;
const pi = __importStar(require("pareto-core-internals"));
const $$ = () => {
    return ($, cb) => {
        const statusDict = {};
        const out = [];
        const source = $;
        $.__forEach(() => false, ($, key) => {
            function process(key) {
                const $ = source.__unsafeGetEntry(key);
                const status = statusDict[key];
                if (statusDict[key] !== undefined) {
                    switch (status[0]) {
                        case 'finished':
                            pi.ss(status, ($) => {
                                //nothing to do
                            });
                            break;
                        case 'processing':
                            pi.ss(status, ($) => {
                                pi.panic("CIRCULAR DEPENDENCY");
                            });
                            break;
                        default: pi.au(status[0]);
                    }
                }
                else {
                    statusDict[key] = ['processing', null];
                    const deps = cb.map($);
                    deps.__forEach(() => false, ($, key) => {
                        process(key);
                    });
                    out.push({
                        'key': key,
                        'value': $
                    });
                    statusDict[key] = ['finished', null];
                }
            }
            process(key);
        });
        return pi.wrapRawArray(out);
    };
};
exports.$$ = $$;
