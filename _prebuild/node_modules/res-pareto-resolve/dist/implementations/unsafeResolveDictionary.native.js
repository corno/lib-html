"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$$ = void 0;
const pi = __importStar(require("pareto-core-internals"));
const $$ = () => {
    return ($, $c) => {
        const source = $;
        const finished = {};
        const processing = {};
        function processEntry($, keyOfEntryBeingProcessed) {
            processing[keyOfEntryBeingProcessed] = null;
            const entry = $c.map({
                'key': keyOfEntryBeingProcessed,
                'value': $,
            }, {
                'all siblings': {
                    __unsafeGetEntry(key) {
                        return () => {
                            return pi.panic("IMPLEMENT RESOLVE CIRCULAR  LOOKUP");
                        };
                    },
                    __getEntry(key, exists, nonExists) {
                        return pi.panic("IMPLEMENT RESOLVE CIRCULAR  LOOKUP");
                    },
                },
                'non circular siblings': {
                    __unsafeGetEntry(key) {
                        const entry = finished[key];
                        if (entry !== undefined) {
                            return entry;
                        }
                        if (processing[key] !== undefined) {
                            if (key === keyOfEntryBeingProcessed) {
                                pi.panic(`'${key}' is referencing itself`);
                            }
                            else {
                                pi.panic(`entries '${key}' and '${keyOfEntryBeingProcessed}' are referencing each other`);
                            }
                        }
                        return source.__getEntry(key, ($) => processEntry($, key), () => pi.panic(`no such entry: '${key}'`));
                    },
                    __getEntry(key, exists, nonExists) {
                        const entry = finished[key];
                        return (entry === undefined)
                            ? nonExists()
                            : exists(entry);
                    },
                },
            });
            processing[keyOfEntryBeingProcessed] === undefined;
            finished[keyOfEntryBeingProcessed] = entry;
            return entry;
        }
        $.__forEach(() => false, ($, key) => {
            const currentKey = key;
            processEntry($, key);
        });
        return pi.wrapRawDictionary(finished);
    };
};
exports.$$ = $$;
