import { T } from "./datatypes.generated";
import * as g_common from "glo-pareto-common";
import * as g_fs from "res-pareto-filesystem";
export declare namespace ASYNC {
    namespace I { }
    namespace A { }
}
export declare namespace SYNC {
    namespace I {
        type Block = {
            readonly 'line': ($: g_common.T.String) => void;
            readonly 'nestedLine': ($c: ($b: SYNC.I.Line) => void) => void;
        };
        type CreateDirectory = ($: g_common.T.Path, $c: ($b: SYNC.I.Directory) => void) => void;
        type CreateDirectoryHandler = {
            readonly 'createWriteStream': SYNC.I.CreateWriteStream;
            readonly 'report': SYNC.I.ReportNodes;
        };
        type CreateFile = ($: g_common.T.Path, $c: ($b: SYNC.I.Block) => void) => void;
        type CreateWriteStream = ($: T.WriteStreamParameters, $c: ($b: g_common.SYNC.I.String) => void) => void;
        type Directory = {
            readonly 'allowedGenerated': ($: g_common.T.String) => void;
            readonly 'allowedManual': ($: g_common.T.String) => void;
            readonly 'directory': ($: g_common.T.String, $c: ($b: SYNC.I.Directory) => void) => void;
            readonly 'file': ($: g_common.T.String, $c: ($b: SYNC.I.Block) => void) => void;
            readonly 'template': ($: g_common.T.String, $c: ($b: SYNC.I.Block) => void) => void;
        };
        type Line = {
            readonly 'indent': ($c: ($b: SYNC.I.Block) => void) => void;
            readonly 'snippet': ($: g_common.T.String) => void;
        };
        type LogAndLogError = {
            readonly 'log': g_common.SYNC.I.String;
            readonly 'logError': g_common.SYNC.I.String;
        };
        type LogError = {
            readonly 'logError': g_common.SYNC.I.String;
        };
        type OnReadDirError = ($: g_fs.T.AnnotatedReadDirError) => void;
        type OnWriteFileError = ($: g_fs.T.AnnotatedWriteFileError) => void;
        type ReportNodes = {
            readonly 'manualNode': ($: T.Node) => void;
            readonly 'superfluousNode': ($: T.Node) => void;
        };
    }
    namespace A {
        namespace P {
            type CreateDirectory = ($c: ($i: SYNC.I.CreateDirectory) => void, $i: SYNC.I.LogAndLogError) => void;
        }
        namespace P {
            type CreateDirectoryCreator = ($c: ($i: SYNC.I.CreateDirectory) => void, $i: SYNC.I.CreateDirectoryHandler) => void;
        }
        namespace P {
            type CreateFile = ($c: ($i: SYNC.I.CreateFile) => void, $i: SYNC.I.LogError) => void;
        }
        namespace P {
            type CreateFileCreator = ($c: ($i: SYNC.I.CreateFile) => void, $i: SYNC.I.CreateWriteStream) => void;
        }
        namespace F {
            type CreateNodeMessage = ($: T.Node) => g_common.T.String;
        }
        namespace P {
            type FountainPen = ($c: ($i: SYNC.I.Block) => void, $i: g_common.SYNC.I.String) => void;
        }
    }
}
