"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$$ = void 0;
const ps = __importStar(require("pareto-core-state"));
const pl = __importStar(require("pareto-core-lib"));
const $$ = ($d) => {
    return ($c, $i) => {
        $c(($, $c) => {
            //const contextPath = $.path
            function createWriterImp(newPath, $c) {
                const createdFilesBuilder = ps.createUnsafeDictionaryBuilder();
                $c({
                    'allowedManual': ($) => {
                        createdFilesBuilder.add($, true);
                    },
                    'allowedGenerated': ($) => {
                        createdFilesBuilder.add($, false);
                    },
                    'directory': ($, $c) => {
                        createdFilesBuilder.add($, false);
                        createWriterImp($d.push({
                            'array': newPath,
                            'element': $,
                        }), $c);
                    },
                    'file': ($, $c) => {
                        createdFilesBuilder.add($, false);
                        $i.createWriteStream({
                            'overwrite': true,
                            path: $d.push({
                                'array': newPath,
                                'element': $,
                            })
                        }, ($i) => {
                            $d.pipeFountainPen($c, $i);
                        });
                    },
                    'template': ($, $c) => {
                        createdFilesBuilder.add($, true);
                        $i.createWriteStream({
                            'overwrite': false,
                            path: $d.push({
                                'array': newPath,
                                'element': $,
                            })
                        }, ($i) => {
                            $d.pipeFountainPen($c, $i);
                        });
                    }
                });
                const createdFiles = createdFilesBuilder.getDictionary();
                pl.processAsyncValue($d.getNodes({
                    'path': newPath,
                }), ($) => {
                    const nodes = $;
                    createdFiles.__forEach(() => false, ($, key) => {
                        if ($) {
                            nodes.__getEntry(key, ($) => {
                                $i.report.manualNode({
                                    path: newPath,
                                    name: key,
                                });
                            }, () => {
                            });
                        }
                    });
                    $.__forEach(() => false, ($, key) => {
                        createdFiles.__getEntry(key, ($) => {
                            //
                        }, () => {
                            $i.report.superfluousNode({
                                path: newPath,
                                name: key,
                            });
                        });
                    });
                });
            }
            createWriterImp($, $c);
        });
    };
};
exports.$$ = $$;
