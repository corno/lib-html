"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$$ = void 0;
const pl = __importStar(require("pareto-core-lib"));
const $$ = ($, $d) => {
    return ($c, $i) => {
        let isFirstLine = true;
        function createSubBlock(currentIndentation, flush, $c) {
            function line($$c) {
                let currentLine = [true, currentIndentation];
                flush({});
                if (isFirstLine) {
                }
                else {
                    $i($.newline);
                }
                isFirstLine = false;
                $$c({
                    'indent': ($c) => {
                        createSubBlock($d.join({
                            'first': currentIndentation,
                            'second': $.indentation,
                        }), () => {
                            if (currentLine[0] === true) {
                                $i(currentLine[1]);
                                currentLine = [false];
                            }
                        }, $c);
                    },
                    'snippet': ($2) => {
                        pl.optional(currentLine, ($) => {
                            currentLine[1] = $d.join({
                                'first': $,
                                'second': $2,
                            });
                        }, () => {
                            $i($.newline);
                            currentLine = [true, $d.join({
                                    'first': currentIndentation,
                                    'second': $2,
                                })];
                        });
                    },
                });
                pl.optional(currentLine, ($) => {
                    $i($);
                }, () => { });
            }
            $c({
                'line': ($) => {
                    line(($i) => {
                        $i.snippet($);
                    });
                },
                'nestedLine': ($c) => {
                    line($c);
                },
            });
        }
        createSubBlock(``, ($) => {
            //no flushing
        }, $c);
    };
};
exports.$$ = $$;
