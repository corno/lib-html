import * as g_this from "./glossary";
export declare namespace D {
}
export declare namespace A {
    type allowedGenerated = <GAnnotation>() => g_this.SYNC.A.F.AllowedGenerated<GAnnotation>;
    type allowedManual = <GAnnotation>() => g_this.SYNC.A.F.AllowedManual<GAnnotation>;
    type directory = <GAnnotation>() => g_this.SYNC.A.F.Directory<GAnnotation>;
    type file = <GAnnotation>() => g_this.SYNC.A.F.File<GAnnotation>;
    type indent = <GAnnotation>() => g_this.SYNC.A.F.Indent<GAnnotation>;
    type line = <GAnnotation>() => g_this.SYNC.A.F.Line<GAnnotation>;
    type nestedLine = <GAnnotation>() => g_this.SYNC.A.F.NestedLine<GAnnotation>;
    type serializeBlock = <GAnnotation>() => g_this.SYNC.A.P.SerializeBlock<GAnnotation>;
    type serializeDirectory = <GAnnotation>() => g_this.SYNC.A.P.SerializeDirectory<GAnnotation>;
    type snippet = <GAnnotation>() => g_this.SYNC.A.F.Snippet<GAnnotation>;
    type template = <GAnnotation>() => g_this.SYNC.A.F.Template<GAnnotation>;
}
export type API = {
    readonly 'allowedGenerated': A.allowedGenerated;
    readonly 'allowedManual': A.allowedManual;
    readonly 'directory': A.directory;
    readonly 'file': A.file;
    readonly 'indent': A.indent;
    readonly 'line': A.line;
    readonly 'nestedLine': A.nestedLine;
    readonly 'serializeBlock': A.serializeBlock;
    readonly 'serializeDirectory': A.serializeDirectory;
    readonly 'snippet': A.snippet;
    readonly 'template': A.template;
};
