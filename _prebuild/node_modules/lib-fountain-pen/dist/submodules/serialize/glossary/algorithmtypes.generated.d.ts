import * as g_common from "glo-pareto-common";
import * as g_main from "../../../main";
import * as g_typelibrary from "../../typelibrary";
export declare namespace ASYNC {
    namespace I { }
    namespace A { }
}
export declare namespace SYNC {
    namespace A {
        namespace F {
            type AllowedGenerated<GAnnotation> = ($: g_common.T.Null) => g_typelibrary.T.Node<GAnnotation>;
        }
        namespace F {
            type AllowedManual<GAnnotation> = ($: g_common.T.Null) => g_typelibrary.T.Node<GAnnotation>;
        }
        namespace F {
            type Directory<GAnnotation> = ($: g_typelibrary.T.Directory<GAnnotation>) => g_typelibrary.T.Node<GAnnotation>;
        }
        namespace F {
            type File<GAnnotation> = ($: g_typelibrary.T.Block<GAnnotation>) => g_typelibrary.T.Node<GAnnotation>;
        }
        namespace F {
            type Indent<GAnnotation> = ($: g_typelibrary.T.Block<GAnnotation>) => g_typelibrary.T.LineElement<GAnnotation>;
        }
        namespace F {
            type Line<GAnnotation> = ($: g_common.T.String) => g_typelibrary.T.BlockElement<GAnnotation>;
        }
        namespace F {
            type NestedLine<GAnnotation> = ($: g_typelibrary.T.NestedLine<GAnnotation>) => g_typelibrary.T.BlockElement<GAnnotation>;
        }
        namespace P {
            type SerializeBlock<GAnnotation> = ($: g_typelibrary.T.Block<GAnnotation>, $i: g_main.SYNC.I.Block) => void;
        }
        namespace P {
            type SerializeDirectory<GAnnotation> = ($: g_typelibrary.T.Directory<GAnnotation>, $i: g_main.SYNC.I.Directory) => void;
        }
        namespace F {
            type Snippet<GAnnotation> = ($: g_common.T.String) => g_typelibrary.T.LineElement<GAnnotation>;
        }
        namespace F {
            type Template<GAnnotation> = ($: g_typelibrary.T.Block<GAnnotation>) => g_typelibrary.T.Node<GAnnotation>;
        }
    }
}
