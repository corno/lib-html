"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$$ = void 0;
const pl = __importStar(require("pareto-core-lib"));
const serializeBlock_s_p_1 = require("./serializeBlock.s.p");
const $$ = () => {
    function serializeDirectory($, $i) {
        $.__forEach(() => false, ($, key) => {
            switch ($[0]) {
                case 'allowedGenerated':
                    pl.ss($, ($) => {
                        $i.allowedGenerated(key);
                    });
                    break;
                case 'allowedManual':
                    pl.ss($, ($) => {
                        $i.allowedManual(key);
                    });
                    break;
                case 'directory':
                    pl.ss($, ($) => {
                        $i.directory(key, ($i) => {
                            serializeDirectory($, $i);
                        });
                    });
                    break;
                case 'file':
                    pl.ss($, ($) => {
                        $i.file(key, ($i) => {
                            (0, serializeBlock_s_p_1.$$)()($, $i);
                        });
                    });
                    break;
                case 'template':
                    pl.ss($, ($) => {
                        $i.template(key, ($i) => {
                            (0, serializeBlock_s_p_1.$$)()($, $i);
                        });
                    });
                    break;
                default: pl.au($[0]);
            }
        });
    }
    return serializeDirectory;
};
exports.$$ = $$;
