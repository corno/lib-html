import * as pt from 'pareto-core-types';
export declare namespace N {
    namespace Block {
        namespace N {
            namespace A {
                namespace N { }
                namespace T { }
            }
        }
        namespace T { }
    }
    namespace BlockElement {
        namespace N {
            namespace TU {
                namespace N {
                    namespace line {
                        namespace N { }
                        namespace T { }
                    }
                    namespace nestedLine {
                        namespace N { }
                        namespace T { }
                    }
                }
                namespace T { }
            }
        }
        namespace T { }
    }
    namespace Directory {
        namespace N {
            namespace D {
                namespace N { }
                namespace T { }
            }
        }
        namespace T { }
    }
    namespace LineElement {
        namespace N {
            namespace TU {
                namespace N {
                    namespace indent {
                        namespace N { }
                        namespace T { }
                    }
                    namespace snippet {
                        namespace N { }
                        namespace T { }
                    }
                }
                namespace T { }
            }
        }
        namespace T { }
    }
    namespace NestedLine {
        namespace N {
            namespace A {
                namespace N { }
                namespace T { }
            }
        }
        namespace T { }
    }
    namespace Node {
        namespace N {
            namespace TU {
                namespace N {
                    namespace allowedGenerated {
                        namespace N {
                            namespace G {
                                namespace N { }
                                namespace T { }
                            }
                        }
                        namespace T { }
                    }
                    namespace allowedManual {
                        namespace N {
                            namespace G {
                                namespace N { }
                                namespace T { }
                            }
                        }
                        namespace T { }
                    }
                    namespace directory {
                        namespace N { }
                        namespace T { }
                    }
                    namespace file {
                        namespace N { }
                        namespace T { }
                    }
                    namespace template {
                        namespace N { }
                        namespace T { }
                    }
                }
                namespace T { }
            }
        }
        namespace T { }
    }
}
export declare namespace T {
    namespace Block {
        type A<GAnnotation> = T.BlockElement<GAnnotation>;
    }
    type Block<GAnnotation> = pt.Array<T.BlockElement<GAnnotation>>;
    namespace BlockElement {
        type line<GAnnotation> = string;
        type nestedLine<GAnnotation> = T.NestedLine<GAnnotation>;
    }
    type BlockElement<GAnnotation> = ['line', string] | ['nestedLine', T.NestedLine<GAnnotation>];
    namespace Directory {
        type D<GAnnotation> = T.Node<GAnnotation>;
    }
    type Directory<GAnnotation> = pt.Dictionary<T.Node<GAnnotation>>;
    namespace LineElement {
        type indent<GAnnotation> = T.Block<GAnnotation>;
        type snippet<GAnnotation> = string;
    }
    type LineElement<GAnnotation> = ['indent', T.Block<GAnnotation>] | ['snippet', string];
    namespace NestedLine {
        type A<GAnnotation> = T.LineElement<GAnnotation>;
    }
    type NestedLine<GAnnotation> = pt.Array<T.LineElement<GAnnotation>>;
    namespace Node {
        namespace allowedGenerated { }
        type allowedGenerated<GAnnotation> = null;
        namespace allowedManual { }
        type allowedManual<GAnnotation> = null;
        type directory<GAnnotation> = T.Directory<GAnnotation>;
        type file<GAnnotation> = T.Block<GAnnotation>;
        type template<GAnnotation> = T.Block<GAnnotation>;
    }
    type Node<GAnnotation> = ['allowedGenerated', null] | ['allowedManual', null] | ['directory', T.Directory<GAnnotation>] | ['file', T.Block<GAnnotation>] | ['template', T.Block<GAnnotation>];
}
