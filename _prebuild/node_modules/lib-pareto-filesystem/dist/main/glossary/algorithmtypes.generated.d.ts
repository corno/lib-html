import * as pt from 'pareto-core-types';
import { T } from "./datatypes.generated";
import * as g_common from "glo-pareto-common";
import * as g_fs from "res-pareto-filesystem";
export declare namespace ASYNC {
    namespace I {
        type HandleAnnotatedReadDirError = ($: g_fs.T.AnnotatedReadDirError) => void;
        type HandleAnnotatedUnlinkError = ($: g_fs.T.AnnotatedUnlinkError) => void;
        type HandleAnnotatedWriteFileError = ($: g_fs.T.AnnotatedWriteFileError) => void;
        type UnlinkFireAndForget = ($: g_fs.T.Unlink_$Data) => void;
        type WriteFileFireAndForget = ($: T.WriteFileData) => void;
    }
    namespace A {
        namespace C {
            type CreateUnlinkFireAndForget = {
                'construct': ($is: {
                    readonly 'errorHandler': ASYNC.I.HandleAnnotatedUnlinkError;
                }) => ASYNC.I.UnlinkFireAndForget;
            };
        }
        namespace C {
            type CreateWriteFileFireAndForget = {
                'construct': ($is: {
                    readonly 'errorHandler': ASYNC.I.HandleAnnotatedUnlinkError;
                }) => ASYNC.I.WriteFileFireAndForget;
            };
        }
        namespace F {
            type ReadDirectoryOrAbort = ($: g_fs.T.ReadDirectory_$Data) => pt.AsyncValue<g_fs.T.ReadDirectory_$Success>;
        }
        namespace F {
            type ReadFileOrAbort = ($: g_fs.T.ReadFile_$Data) => pt.AsyncValue<g_common.T.String>;
        }
        namespace F {
            type ReadOptionalDirectory = ($: T.ReadOptionalDirectoryData) => pt.AsyncValue<T.ReadOptionalDirectoryResult>;
        }
    }
}
export declare namespace SYNC { }
