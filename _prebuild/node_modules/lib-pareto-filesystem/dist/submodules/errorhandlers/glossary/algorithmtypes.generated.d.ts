import * as g_common from "glo-pareto-common";
import * as g_fs from "res-pareto-filesystem";
export declare namespace ASYNC {
    namespace I {
        type Mkdir = ($: g_fs.T.AnnotatedMkdirError) => void;
        type ReadDir = ($: g_fs.T.AnnotatedReadDirError) => void;
        type ReadFile = ($: g_fs.T.AnnotatedReadFileError) => void;
        type String = ($: g_common.T.String) => void;
        type Unlink = ($: g_fs.T.AnnotatedUnlinkError) => void;
        type WriteFile = ($: g_fs.T.AnnotatedWriteFileError) => void;
    }
    namespace A {
        namespace C {
            type Mkdir = {
                'construct': ($is: {
                    readonly 'handler': ASYNC.I.String;
                }) => ASYNC.I.Mkdir;
            };
        }
        namespace C {
            type ReadDir = {
                'construct': ($is: {
                    readonly 'handler': ASYNC.I.String;
                }) => ASYNC.I.ReadDir;
            };
        }
        namespace C {
            type ReadFile = {
                'construct': ($is: {
                    readonly 'handler': ASYNC.I.String;
                }) => ASYNC.I.ReadFile;
            };
        }
        namespace C {
            type Unlink = {
                'construct': ($is: {
                    readonly 'handler': ASYNC.I.String;
                }) => ASYNC.I.Unlink;
            };
        }
        namespace C {
            type WriteFile = {
                'construct': ($is: {
                    readonly 'handler': ASYNC.I.String;
                }) => ASYNC.I.WriteFile;
            };
        }
    }
}
export declare namespace SYNC { }
