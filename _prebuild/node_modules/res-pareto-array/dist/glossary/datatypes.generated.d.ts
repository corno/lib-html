import * as pt from 'pareto-core-types';
export declare namespace N { }
export declare namespace T {
    namespace Array {
        type A<TType> = TType;
    }
    type Array<TType> = pt.Array<TType>;
    namespace ArrayOfArrays {
        type A<TType> = T.Array<TType>;
    }
    type ArrayOfArrays<TType> = pt.Array<T.Array<TType>>;
    namespace GetElementAtData {
        type array<TType> = T.Array<TType>;
        type index<TType> = number;
    }
    type GetElementAtData<TType> = {
        readonly 'array': T.Array<TType>;
        readonly 'index': number;
    };
    namespace OptionalElement {
        type O<TType> = TType;
    }
    type OptionalElement<TType> = [false] | [true, TType];
    namespace PushParameters {
        type array<TType> = T.Array<TType>;
        type element<TType> = TType;
    }
    type PushParameters<TType> = {
        readonly 'array': T.Array<TType>;
        readonly 'element': TType;
    };
}
